<?php
namespace App\Controllers;

use App\Models\AdminModel;
use CodeIgniter\Events\Events;
use CodeIgniter\HTTP\RequestInterface;
use CodeIgniter\HTTP\ResponseInterface;
use CodeIgniter\Shield\Entities\User;
use CodeIgniter\Shield\Exceptions\ValidationException;
use CodeIgniter\Shield\Models\UserModel;
use CodeIgniter\Shield\Validation\ValidationRules;
use Psr\Log\LoggerInterface;

class AdminManagement extends BaseController
{
    public $pager;
    public $page        = 1; //페이지
    public $per_page    = 30; //페이지당 노출row

    public function initController(RequestInterface $request, ResponseInterface $response, LoggerInterface $logger)
    {

        parent::initController($request, $response, $logger); // TODO: Change the autogenerated stub
        $this->pager = \Config\Services::pager();
    }

    public function index()
    {
        $aInput     = [];
        $nList      = self::getListTot($aInput);
        $tot_page   = ceil( $nList / $this->per_page );

        $view_data = [
                'tot_page'  => $tot_page
            ,   'per_page'  => $this->per_page
            ,   'uniqId'    => $this->request->getPostGet('id')
        ];

        $this->_header();
        echo view('admin/index' , $view_data);
        $this->_footer();

    }

    public function lists_ajax(): string
    {

        isAjaxCheck();

        $aInput = [
            'search_text'   => $this->request->getPostGet('search_text')
            ,   'search_type'   => $this->request->getPostGet('search_type')
            ,   'category'      => $this->request->getPostGet('category')
        ];

        $set_page           = $this->request->getPostGet('page') ?? $this->page;
        $set_per_page       = $this->request->getPostGet('per_page') ?? $this->per_page;

        $nAdminLists        = $this->getListTot($aInput);

        $pagination_html    = $this->pager->makeLinks($set_page,$set_per_page,$nAdminLists);
        $tot_page           = ceil($nAdminLists / $set_per_page);
        $tot_page           = $tot_page ?? 1;
        $s_limit            = max(($set_page - 1) * $set_per_page, 0);

        $admin_model = new AdminModel();
        $aAdminLists = $admin_model->getAdminList($aInput, false , $s_limit , $set_per_page);

        foreach ($aAdminLists as $k => $r) {
            $aAdminLists[$k]['VNO'] = $nAdminLists - ( ($set_page - 1) * $set_per_page ) - $k;
        }

        $view_data = [
                'data'                  => $aAdminLists
            ,   'pagination_html'       => $pagination_html
            ,   'tot_page'              => $tot_page
            ,   'tot_cnt'               => $nAdminLists
            ,   'per_page'              => $set_per_page
        ];

        return view('admin/lists_ajax' , $view_data);

    }


    public function upsertForm(): string
    {

        isAjaxCheck();

        $isUpdate       = false;
        $title          = '관리자 등록';
        $aAdminInfo      = [
                'id'        => ''
            ,   'secret'    => ''
            ,   'username'  => ''
            ,   'active'    => 1
        ];

        $aInput = ['id' => $this->request->getPostGet('id')];
        if(!empty($this->request->getPostGet('id'))){ //update
            $title          = '관리자 수정';
            $admin_model = new AdminModel();
            $aAdminInfo = $admin_model->getAdminInfo($aInput);
            $isUpdate = true;
        }

        $view_data = [
                'title' => $title
            ,   'data'  => $aAdminInfo
            ,   'isUpdate'  => $isUpdate
        ];

        return view('admin/upsert_form',  $view_data);

    }

    public function upsert() : ResponseInterface
    {


        $isUpdate       = false; //insert | update
        $upsertTitle    = '회원 등록';
        $users     = new AdminModel();


        {//validation

            if( $this->request->getPostGet('id') ){ //update
                //add validation
                $rules['id']    = 'required';

                $isUpdate       = true;
                $upsertTitle    = '회원 수정';

                $aInfo = $users->find($this->request->getPostGet('id'));

                if(empty($aInfo->id)){
                    return $this->response->setJSON(['success' => false , 'msg' => "정상적인 정보가 아닙니다.\n새로고침 후 다시 진행해주세요.", 'csrf' => csrf_hash()]);
                }

                $rules = setting('Validation.user_modify');

                if($this->request->getPost('password')){ //입력된 비밀번호가 있는 경우에만
                    $rules['password'] = [ 'label' => 'Auth.password', 'rules' => 'required|max_byte[72]|strong_password[]', 'errors' => [ 'max_byte' => 'Auth.errorPasswordTooLongBytes' ] ];
                    $rules['password_confirm'] = [ 'label' => 'Auth.passwordConfirm', 'rules' => 'required|matches[password]'];
                }

            }else{

                // Validate here first, since some things,
                // like the password, can only be validated properly here.
                $rule   = new ValidationRules();
                $rules = $rule->getRegistrationRules();

                //비밀번호 필수
                $rules['password']          = 'required';
                $rules['password_confirm']  = 'required|matches[password]';

            }

            if (! $this->validate($rules))
            {
                return $this->response->setJSON(['success' => false , 'msg' => '' , 'error_msg' => $this->validator->getErrors(), 'csrf' => csrf_hash()]);
            }

        }

        // Save the user
        $allowedPostFields = array_keys($rules);
        $user              = new User();

        if($isUpdate) $allowedPostFields[] = 'id';

        $aInput = $this->request->getPost($allowedPostFields);

        if($aInput['active'] == 0) $aInput['deleted_at'] = date('Y-m-d H:i:s');



        $user->fill($aInput);

        // Workaround for email only registration/login
        if ($user->username === null) {
            $user->username = null;
        }

        try {
            $users->save($user);
        } catch (ValidationException $e) {
            return $this->response->setJSON(['success' => false , 'msg' => '' , 'error_msg' => $users->errors()]);
        }

        if(!$isUpdate){
            // To get the complete user object with ID, we need to get from the database
            $user = $users->findById($users->getInsertID());

            // Add to default group
            $users->addToDefaultGroup($user);
    //        $user->addGroup('admin');

            Events::trigger('register', $user);
        }

        if($this->request->getPost('active') == 1){
            $user->activate();
        }else{
            $user->deactivate();
        }

        return $this->response->setJSON(['success'=> true , 'msg' => '' , 'error_msg' => '']);
    }

    public function delete(): bool
    {
        $aId    = $this->request->getPostGet('id_arr');

        if(empty($aId)){
            echo json_encode(['success' => false , 'msg' => "삭제할 데이터를 선택해주세요!", 'csrf' => csrf_hash()]);
            return false;
        }

        if(!is_array($aId)){
            echo json_encode(['success' => false , 'msg' => lang('Security.disallowedAction'), 'csrf' => csrf_hash()]);
            return false;
        }

        $admin_model      = new AdminModel();
        $bRet = $admin_model->delete($aId);

        if($bRet) echo json_encode(['success' => true , 'msg' => '삭제가 완료되었습니다.' , 'csrf' => csrf_hash()]);
        else echo json_encode(['success' => false , 'msg' => '삭제도중 문제가 발생하였습니다.', 'csrf' => csrf_hash()]);

        return true;

    }


    private function getListTot($aInput) : int
    {

        $admin_model = new AdminModel();
        $nLists = $admin_model->getAdminList($aInput,true);
        $nLists = array_shift($nLists);
        if(empty($nLists)) $nLists = 0;

        return (int)$nLists;

    }

}