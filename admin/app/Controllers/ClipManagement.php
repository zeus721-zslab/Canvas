<?php
namespace App\Controllers;

use App\Entities\Clip;
use App\Libraries\CustomImageLib;
use App\Libraries\CustomUploadsLib;
use App\Models\ClipModel;
use CodeIgniter\HTTP\RequestInterface;
use CodeIgniter\HTTP\ResponseInterface;
use Psr\Log\LoggerInterface;

class ClipManagement extends BaseController
{

    public $pager;
    public $page        = 1; //페이지
    public $per_page    = 30; //페이지당 노출row

    public function initController(RequestInterface $request, ResponseInterface $response, LoggerInterface $logger)
    {
        parent::initController($request, $response, $logger); // TODO: Change the autogenerated stub
        $this->pager = \Config\Services::pager();
    }

    public function index()
    {

        $aInput     = [];
        $nList      = self::getListTot($aInput);
        $tot_page   = ceil( $nList / $this->per_page );

        $view_data = [
                'tot_page'  => $tot_page
            ,   'per_page'  => $this->per_page
            ,   'uniqId'    => $this->request->getPostGet('id')
        ];

        $this->_header();
        echo view('/clip/index' , $view_data);
        $this->_footer();

    }

    public function lists_ajax(): string
    {

        isAjaxCheck();

        $aInput = [
                'search_text'   => $this->request->getPostGet('search_text')
            ,   'search_type'   => $this->request->getPostGet('search_type')
            ,   'category'   => $this->request->getPostGet('category')
        ];

        $set_page           = $this->request->getPostGet('page') ?? $this->page;
        $set_per_page       = $this->request->getPostGet('per_page') ?? $this->per_page;

        $nClipLists        = $this->getListTot($aInput);

        $pagination_html    = $this->pager->makeLinks($set_page,$set_per_page,$nClipLists);
        $tot_page           = ceil($nClipLists / $set_per_page);
        $tot_page           = $tot_page ?? 1;
        $s_limit            = max(($set_page - 1) * $set_per_page, 0);

        $clip_model = new ClipModel();
        $aClipLists = $clip_model->getClipList($aInput, false , $s_limit , $set_per_page);

        foreach ($aClipLists as $k => $r) {
            $aClipLists[$k]['VNO'] = $nClipLists - ( ($set_page - 1) * $set_per_page ) - $k;
        }

        $view_data = [
                'data'                  => $aClipLists
            ,   'pagination_html'       => $pagination_html
            ,   'tot_page'              => $tot_page
            ,   'tot_cnt'               => $nClipLists
            ,   'per_page'              => $set_per_page
        ];

        return view('clip/lists_ajax' , $view_data);

    }

    public function upsertForm(): string
    {

        isAjaxCheck();
        helper('number');

        $isUpdate       = false;
        $title          = '요소 정보';
        $eClipEn        = new Clip(); //dummy
        $aClipInfo      = $eClipEn->getAttributes();
        $aClipInfo['clip_id'] = '';

        $aInput = ['clip_id' => $this->request->getPostGet('id')];
        if(!empty($this->request->getPostGet('id'))){ //update
            $clip_model = new ClipModel();
            $aClipInfo = $clip_model->getClipInfo($aInput);
            $isUpdate = true;
        }

        $view_data = [
                'title' => $title
            ,   'data'  => $aClipInfo
            ,   'isUpdate'  => $isUpdate
        ];

        return view('clip/upsert_form',  $view_data);

    }

    public function upsert(): bool
    {

        $isUpdate       = false; //insert | update
        $upsertTitle    = '요소 등록';
        $clip_model     = new ClipModel();

        {//validation

            //default validation rules
            $rules          = [
                    'category' => 'required|in_list[clip,bg,topper]'
                ,   'title'    => 'required'
                ,   'use_flag'  => 'required|in_list[Y,N]'
            ];

            //if($this->request->getFile('save_file')) $rules['save_file'] = 'mime_in[save_file,image/*,application/pdf]';

            if( $this->request->getPostGet('clip_id') ){ //update

                //add validation
                $rules['clip_id']    = 'required';

                $isUpdate       = true;
                $upsertTitle    = '요소 수정';

                $aInfo = $clip_model->getClipInfo(['clip_id' => $this->request->getPostGet('clip_id') ]);

                if(empty($aInfo)){
                    echo json_encode(['success' => false , 'msg' => "정상적인 정보가 아닙니다.\n새로고침 후 다시 진행해주세요.", 'csrf' => csrf_hash()]);
                    return false;
                }

            }

            /**
             * 업로드 된 savefile필드가 있고 파일이 pdf인 경우 thumbfile가 있는지 확인한다.
             **/
            if( $tmp_saveFile = $this->request->getFile('save_file') ) {
                if(strpos($tmp_saveFile->getMimeType(), 'pdf') !== false ){
                    $rules['thumb_file'] = 'uploaded[thumb_file]|is_image[thumb_file]|mime_in[thumb_file,image/*]';
                }
            };

            if (! $this->validate($rules))
            {
                echo json_encode(['success' => false , 'msg' => '' , 'error_msg' => $this->validator->getErrors(), 'csrf' => csrf_hash()]);
                return false;
            }

        }

        { //data set

            $user       = auth()->getUser();

            $eClipEn    = new Clip(); //entity
            $aInput     = $eClipEn->getAttributes(); //set default data

            $aInput['title']    = $this->request->getPost('title');
            $aInput['keyword']  = $this->request->getPost('keyword');
            $aInput['use_flag'] = $this->request->getPost('use_flag');
            $aInput['category'] = $this->request->getPost('category');
            $aInput['paid_yn'] = $this->request->getPost('paid_yn');

            if($isUpdate){
                $_id                = $this->request->getPostGet('clip_id');
                $aInput['mod_date'] = date('YmdHis');
                $aInput['mod_id']   = $user->id;
                $aInput['mod_ip']   = $this->request->getIPAddress();

                unset($aInput['reg_date']);
                unset($aInput['reg_id']);
                unset($aInput['reg_ip']);
                unset($aInput['save_file']);
                unset($aInput['file_size']);
                unset($aInput['org_file']);
                unset($aInput['file_mime']);
                unset($aInput['thumb_file']);
                unset($aInput['hit']);

            }else{
                $aInput['reg_date'] = date('YmdHis');
                $aInput['reg_id']   = $user->id;
                $aInput['reg_ip']   = $this->request->getIPAddress();
            }

        }

        {//file upload

            $oUpload    = new CustomUploadsLib(); //업로드 관련 library
            $oImage     = new CustomImageLib(); //이미지 변환 library

            if($this->request->getFile('save_file'))
            {//텍스트 이미지 파일

                $aImg = $oUpload->run(['type' => 'clip' , 'file_field' => 'save_file']);

                if(!$aImg['success']) {
                    echo json_encode(['success' => false , 'msg' => "이미지[save_file] 등록 중 문제가 발생했습니다." , 'csrf' => csrf_hash() ]);
                    return false;
                }

                $aInput['save_file']    = $aImg['data']['path'];
                $aInput['file_size']    = $aImg['data']['size'];
                $aInput['org_file']     = $aImg['data']['originalname'];
                $aInput['file_mime']    = $aImg['data']['mimetype'];

                $path = DOCROOT.$aImg['data']['path'];
                $img_info = getimagesize($path);

                $aInput['img_w'] = $img_info[0];
                $aInput['img_h'] = $img_info[1];

            }


            if(isset($aInput['file_mime']) && strpos($aInput['file_mime'], 'image') !== false)
            { //업로드파일이 이미지인 경우 썸네일 생성

                $aImgInput = [
                        'act'       => 'create'
                    ,   'path'      => $aInput['save_file']
                    ,   'file_name' => $aImg['data']['filename']
                    ,   'type'      => 'clip'
                    ,   'h'         => 150
                ];

                $aResizeImg = $oImage->resize_h($aImgInput);

                if($aResizeImg['success'] == false){
                    echo json_encode(['success' => false , 'msg' => "이미지 리사이징 중 문제가 발생했습니다." , 'csrf' => csrf_hash() ]);
                    return false;
                }

                $aInput['thumb_file'] = $aResizeImg['data'];

            }

            if($this->request->getFile('thumb_file') && empty($aInput['thumb_file']))
            { //업로드된 파일이 pdf 인경우 thumbnail_file 필드에 파일을 업로드

                $aImg = $oUpload->run(['type' => 'clip' , 'file_field' => 'thumb_file']);

                if(!$aImg['success']) {
                    echo json_encode(['success' => false , 'msg' => "이미지[thumb_file] 등록 중 문제가 발생했습니다." , 'csrf' => csrf_hash() ]);
                    return false;
                }

                $aImgInput = [
                        'act'       => 'change'
                    ,   'path'      => $aImg['data']['path']
                    ,   'file_name' => $aImg['data']['filename']
                    ,   'type'      => 'clip'
                    ,   'h'         => 150
                ];

                $aResizeImg = $oImage->resize_h($aImgInput);

                if($aResizeImg['success'] == false){
                    echo json_encode(['success' => false , 'msg' => "이미지 리사이징 중 문제가 발생했습니다." , 'csrf' => csrf_hash() ]);
                    return false;
                }

                $aInput['thumb_file'] = $aResizeImg['data'];

            }

        }

        if($isUpdate) $bRet = $clip_model->update($_id,$aInput); //수정
        else $bRet = $clip_model->insert($aInput); //등록

        if(empty($bRet)) echo json_encode(['success' => false , 'msg' => "{$upsertTitle} 실패.\n잠시 후 다시 시도해주세요." , 'csrf' => csrf_hash() ]);
        else echo json_encode(['success' => true , 'msg' => "정상적으로 {$upsertTitle}이 완료되었습니다." , 'error_msg' => [] , 'csrf' => csrf_hash()]);
        return true;

    }

    public function delete(): bool
    {
        $aId    = $this->request->getPostGet('id_arr');

        if(empty($aId)){
            echo json_encode(['success' => false , 'msg' => "삭제할 데이터를 선택해주세요!", 'csrf' => csrf_hash()]);
            return false;
        }

        if(!is_array($aId)){
            echo json_encode(['success' => false , 'msg' => lang('Security.disallowedAction'), 'csrf' => csrf_hash()]);
            return false;
        }

        $clip_model      = new ClipModel();
        $bRet = $clip_model->delete($aId);

        if($bRet) echo json_encode(['success' => true , 'msg' => '삭제가 완료되었습니다.' , 'csrf' => csrf_hash()]);
        else echo json_encode(['success' => false , 'msg' => '삭제도중 문제가 발생하였습니다.', 'csrf' => csrf_hash()]);

        return true;

    }

    public function copyClip() : ResponseInterface
    {

        $aInput = [
            'clip_id' => $this->request->getPost('clip_id')
        ];

        $enClip         = new Clip();
        $clip_model     = new ClipModel();
        $aInfo          = $clip_model->asArray()->find($aInput['clip_id']);

        $aInfo['title']     = $aInfo['title'].' - 복사본';
        $aInfo['use_flag']  = 'N'; //복사대상은 사용안함 강제처리
        $aInfo['reg_date']  = date('YmdHis');
        $aInfo['reg_ip']    = $this->request->getIPAddress();
        $aInfo['reg_id']    = auth()->id();

        unset($aInfo['clip_id']);
        unset($aInfo['mod_date']);
        unset($aInfo['mod_ip']);
        unset($aInfo['mod_id']);
        unset($aInfo['old_pk']);

        $enClip->fill($aInfo);
        $ret = $clip_model->save($enClip);

        $resp = ['success' => false , 'msg' => '요소 복사 중 문제가 발생하였습니다.'];
        if($ret) $resp = ['success' => true , 'msg' => '요소 복사가 완료되었습니다.'];

        return $this->response->setJSON($resp);

    }


    private function getListTot($aInput = []) : int
    {
        $clip_model = new ClipModel();
        $nLists = $clip_model->getClipList($aInput,true);
        $nLists = array_shift($nLists);
        if(empty($nLists)) $nLists = 0;

        return (int)$nLists;
    }

}