<?php
namespace App\Controllers;

use App\Entities\Group;
use App\Entities\Template;
use App\Models\CanvasModel_v2;
use App\Models\GroupModel;
use App\Models\TemplateModel;
use CodeIgniter\HTTP\RequestInterface;
use CodeIgniter\HTTP\ResponseInterface;
use Psr\Log\LoggerInterface;

class GroupManagement extends BaseController
{
    public $pager;
    public $page        = 1; //페이지
    public $per_page    = 30; //페이지당 노출row

    public function initController(RequestInterface $request, ResponseInterface $response, LoggerInterface $logger)
    {
        parent::initController($request, $response, $logger); // TODO: Change the autogenerated stub
        $this->pager = \Config\Services::pager();
    }

    public function index()
    {

        $aInput     = [];
        $nList      = self::getListTot($aInput);
        $tot_page   = ceil( $nList / $this->per_page );

        $view_data = [
                'tot_page'  => $tot_page
            ,   'per_page'  => $this->per_page
            ,   'uniqId'    => $this->request->getPostGet('id')
        ];

        $this->_header();
        echo view('group/index' , $view_data);
        $this->_footer();

    }

    public function sort()
    {

        $aInput     = [];
        $nList      = self::getListTot($aInput);
        $tot_page   = ceil( $nList / $this->per_page );

        $view_data = [
            'tot_page'  => $tot_page
            ,   'per_page'  => $this->per_page
            ,   'uniqId'    => $this->request->getPostGet('id')
        ];

        $this->_header();
        echo view('group/sort' , $view_data);
        $this->_footer();

    }

    public function recommend()
    {

        $aInput     = [];
        $nList      = self::getListTot($aInput);
        $tot_page   = ceil( $nList / $this->per_page );

        $view_data = [
            'tot_page'  => $tot_page
            ,   'per_page'  => $this->per_page
            ,   'uniqId'    => $this->request->getPostGet('id')
        ];

        $this->_header();
        echo view('group/recommend' , $view_data);
        $this->_footer();

    }


    public function getSortGroup(): bool
    {

        isAjaxCheck();

        $aInput = [
                'category' => $this->request->getPost('category')
            ,   'view_type' => $this->request->getPost('view_type')
            ,   'menu_type' => $this->request->getPost('view_type') == 'menu' ? $this->request->getPost('menu_type') : ''
            ,   'orderby'   => 'seq ASC'
        ];

        $group_model = new GroupModel();
        $aList = $group_model->getGroupList($aInput);

        echo json_encode(['success' => true , 'msg' => '' , 'data' => $aList]);

        return true;

    }

    public function lists_ajax(): string
    {

        isAjaxCheck();

        $aInput = [
                'search_text'   => $this->request->getPostGet('search_text')
            ,   'search_type'   => $this->request->getPostGet('search_type')
            ,   'view_type'     => $this->request->getPostGet('view_type')
            ,   'category'      => $this->request->getPostGet('category')
        ];

        if(empty($aInput['view_type'])){//리스트에서 추천템플릿은 제외
            $aInput['view_type'] = ['menu','canvas'];
        }

        $set_page           = $this->request->getPostGet('page') ?? $this->page;
        $set_per_page       = $this->request->getPostGet('per_page') ?? $this->per_page;

        $nGroupLists        = $this->getListTot($aInput);

        $pagination_html    = $this->pager->makeLinks($set_page,$set_per_page,$nGroupLists);
        $tot_page           = ceil($nGroupLists / $set_per_page);
        $tot_page           = $tot_page ?? 1;
        $s_limit            = max(($set_page - 1) * $set_per_page, 0);

        $group_model = new GroupModel();
        $aGroupLists = $group_model->getGroupList($aInput, false , $s_limit , $set_per_page);

        foreach ($aGroupLists as $k => $r) {
            $aGroupLists[$k]['VNO'] = $nGroupLists - ( ($set_page - 1) * $set_per_page ) - $k;
        }

        $view_data = [
                'data'                  => $aGroupLists
            ,   'pagination_html'       => $pagination_html
            ,   'tot_page'              => $tot_page
            ,   'tot_cnt'               => $nGroupLists
            ,   'per_page'              => $set_per_page
        ];

        return view('group/lists_ajax' , $view_data);

    }


    public function upsertForm(): string
    {

        isAjaxCheck();

        $isUpdate       = false;
        $title          = '그룹 정보';
        $eGroupEn        = new Group(); //dummy
        $aGroupInfo      = $eGroupEn->getAttributes();
        $aGroupInfo['group_id'] = '';

        $aInput = ['group_id' => $this->request->getPostGet('id') , 'isUseFlagAll' => true];
        $aList  = [];
        if(!empty($this->request->getPostGet('id'))){ //update

            $group_model    = new GroupModel();
            $canvas_model   = new CanvasModel_v2();
            $aGroupInfo     = $group_model->getGroupInfo($aInput);
            $isUpdate       = true;

            if($aGroupInfo['category'] == 'clip' || $aGroupInfo['category'] == 'bg'){
                $aList = $canvas_model->getClipGroupList($aInput);
            }else if($aGroupInfo['category'] == 'template'){
                $aList = $canvas_model->getTemplateGroupList($aInput , false , 0 , 9999);
                foreach ($aList as $k => $r) {
                    unset($aList[$k]['blob_data']);
                }
            }else{
                alert_script('카테고리정보를 확인해주세요.');
            }

        }

        $view_data = [
                'title' => $title
            ,   'data'  => $aGroupInfo
            ,   'isUpdate'  => $isUpdate
            ,   'aList'     => $aList
        ];

        return view('group/upsert_form',  $view_data);

    }

    public function upsert_sort(): bool
    {

        $aInput = [
                'ok_list'   => json_decode($this->request->getPost('ok_list') , true)
            ,   'no_list'   => json_decode($this->request->getPost('no_list') , true)
        ];

        $enGroup = new Group();
        $group_model = new GroupModel();
        $user = auth()->getUser();

        if (count($aInput['ok_list']) > 0) { // ok
            foreach ($aInput['ok_list'] as $k => $group_id) {

                $aInfo['group_id'] = $group_id;
                $aInfo['seq'] = (int)$k + 1;
                $aInfo['mod_date'] = date('YmdHis');
                $aInfo['mod_ip'] = $this->request->getIPAddress();
                $aInfo['mod_id'] = $user->id;

                $enGroup->fill($aInfo);
                $group_model->save($enGroup);
            }
        }

        if (count($aInput['no_list']) > 0) { // ok
            foreach ($aInput['no_list'] as $k => $group_id) {

                $aInfo['group_id'] = $group_id;
                $aInfo['seq'] = 999;
                $aInfo['mod_date'] = date('YmdHis');
                $aInfo['mod_ip'] = $this->request->getIPAddress();
                $aInfo['mod_id'] = $user->id;

                $enGroup->fill($aInfo);
                $group_model->save($enGroup);


                $group_model->update($group_id,$aInfo);
            }
        }

        if($group_model->db->transStatus() === false){
            echo json_encode(['success' => false , 'msg' => '순서 변경 중 문제가 발생하였습니다.' ]);
        }else{
            echo json_encode(['success' => true , 'msg' => '순서가 정상적으로 변경되었습니다.' ]);
        }

        return true;
    }

    public function getInfo(): ResponseInterface
    {

        $group_id   = $this->request->getPost('group_id');
        $show_YM    = $this->request->getPost('show_YM');
        $use_flag    = $this->request->getPost('use_flag');
        $view_type    = $this->request->getPost('view_type');

        $aInput = [];
        if($group_id) $aInput['group_id'] = $group_id;
        if($show_YM) $aInput['show_YM'] = $show_YM;
        if($use_flag) $aInput['use_flag'] = $use_flag;
        if($view_type) $aInput['view_type'] = $view_type;

        $group_model = new GroupModel();
        $aInfo = $group_model->getGroupInfo($aInput);

        if($aInfo){
            unset($aInput);
            $aInput = [ 'group_id' => $aInfo['group_id'] ];
            $aInfo['mapp_data'] = $group_model->getTemplateGroupList($aInput, false , 0 , 9999);
            foreach ($aInfo['mapp_data'] as $k => $r) {
                unset($aInfo['mapp_data'][$k]['blob_data']);
            }
        }

        return $this->response->setJSON(['success' => true , 'msg' => '' , 'data' => $aInfo ]);

    }


    public function recommendUpsert(): ResponseInterface
    {



        $isUpdate       = false;
        $upsertTitle    = '이 달의 템플릿 등록';

        $group_model = new GroupModel();

        try {

            {//validation
                //default validation rules
                $rules = [
                    'show_YM' => 'required|numeric'
                ];

//                for ($i = 1; $i <= 7; $i++) {
//                    $rules['favorite_l' . $i] = 'required';
//                    $rules['favorite_r' . $i] = 'required';
//                }

                if ($this->request->getPostGet('group_id')) { //update

                    $isUpdate = true;
                    $upsertTitle = '그룹 수정';

                    $aInfo = $group_model->getGroupInfo(['group_id' => $this->request->getPostGet('group_id')]);

                    if (empty($aInfo)) {
                        throw new \Exception("정상적인 정보가 아닙니다.\n새로고침 후 다시 진행해주세요.");
                    }

                }

                if (!$this->validate($rules)) {
                    return $this->response->setJSON(['success' => false, 'msg' => '', 'error_msg' => $this->validator->getErrors(), 'csrf' => csrf_hash()]);
                }

            }

            $groupEn = new Group();

            $aInput = $groupEn->getAttributes();
            $user_id = auth()->id();
            if($isUpdate) {
                $_id = $this->request->getPostGet('group_id');
                $aInput['mod_date'] = date('YmdHis');
                $aInput['mod_ip'] = $this->request->getIPAddress();
                $aInput['mod_id'] = $user_id;
            }else{
                $aInput['reg_date'] = date('YmdHis');
                $aInput['reg_ip'] = $this->request->getIPAddress();
                $aInput['reg_id'] = $user_id;
            }

            $aInput['seq'] = 999;
            $aInput['use_flag'] = 'Y';
            $aInput['title'] = '이 달의 추천 템플릿['.date('Ym').']';
            $aInput['view_type'] = 'recommend';
            $aInput['category'] = 'template';
            $aInput['show_YM'] = $this->request->getPost('show_YM');

            if($isUpdate) {
                $bRet = $group_model->update($_id, $aInput); //수정
                $group_id = $_id;
            } else {
                $bRet = $group_model->insert($aInput); //등록
                $group_id = $group_model->getInsertID();
            }

            if(!$bRet) throw new \Exception("그룹정보 저장 중 문제가 발생하였습니다.\nmsg : ".json_encode($group_model->errors(),JSON_UNESCAPED_UNICODE));

            {//기존 맵핑 데이터 삭제
                $mapp_data = $group_model->getTemplateGroupList(['group_id' => $group_id]);
                if($mapp_data) {
                    $ret = $group_model->del_mapp('template', $group_id);;
                    if(!$ret) throw new \Exception('기존 매핑데이터 삭제 중 문제가 발생하였습니다');
                }
            }


            $group_model->setTrans();

            {
                /** @desc 'left seq 1~7 / right seq 8-14 ' */

                for ($i = 0; $i < 7; $i++) {
                    $j = $i + 1;
                    $ins_data[$i] = [
                            'group_id'      => $group_id
                        ,   'template_id'   => $this->request->getPost("recommend_l{$j}")
                        ,   'seq'           => $j
                        ,   'user_id'        => $user_id
                        ,   'user_ip'        => $this->request->getIPAddress()
                    ];
                    $ins_data[$i+7] = [
                            'group_id'      => $group_id
                        ,   'template_id'   => $this->request->getPost("recommend_r{$j}")
                        ,   'seq'           => $i+8
                        ,   'user_id'        => $user_id
                        ,   'user_ip'        => $this->request->getIPAddress()
                    ];

                }

            }

            $ins_data = array_key_sort($ins_data,'seq','asc');

            foreach ($ins_data as $r) {
                if($r['template_id']) $group_model->insert_mapp($r);
            }

            $group_model->completeTrans();

            if($group_model->statusTrans() === false){//db error & rollback
                throw new \Exception("매핑데이터 저장 중 문제가 발생하였습니다.\nmsg : ".json_encode($group_model->errors(),JSON_UNESCAPED_UNICODE) );
            }

            $ret = ['success' => true , 'msg' => '이달의 추천 템플릿 저장이 완료되었습니다.' , 'csrf' => csrf_hash()];


        } catch(\Exception $e) {

            $ret = ['success' => false , 'msg' => $e->getMessage() , 'csrf' => csrf_hash()];

        }

        return $this->response->setJSON($ret);

    }

    public function upsert(): bool
    {

        /**
         * @TODO 'tempalte_id가 중복된게 있는지 확인 후 있으면 저장안되도록 처리'
         *
         */

        $isUpdate       = false; //insert | update
        $upsertTitle    = '그룹 등록';
        $group_model = new GroupModel();

        {//validation

            //default validation rules
            $rules = [
                    'title'     => 'required'
                ,   'category'  => 'required|in_list[clip,bg,template]'
                ,   'use_flag'  => 'required|in_list[Y,N]'
                ,   'view_type'  => 'required|in_list[menu,canvas]'
            ];

            if($this->request->getPost('view_type') == 'menu'){
                $rules['menu_type'] = 'required|in_list[event,play,env,notice,month]';
            }

            if( $this->request->getPostGet('group_id') ){ //update

                $isUpdate       = true;
                $upsertTitle    = '그룹 수정';

                $aInfo = $group_model->getGroupInfo(['group_id' => $this->request->getPostGet('group_id') ]);

                if(empty($aInfo)){
                    echo json_encode(['success' => false , 'msg' => "정상적인 정보가 아닙니다.\n새로고침 후 다시 진행해주세요.", 'csrf' => csrf_hash()]);
                    return false;
                }

            }

            if (! $this->validate($rules))
            {
                echo json_encode(['success' => false , 'msg' => '' , 'error_msg' => $this->validator->getErrors(), 'csrf' => csrf_hash()]);
                return false;
            }

            //등록 시 환경 구성 및 안내문의 group은 1개만 등록가능하도록
            if(!$isUpdate){
                if(     $this->request->getPost('view_type') == 'menu'
                    &&  ($this->request->getPost('menu_type') == 'env' || $this->request->getPost('menu_type') == 'notice') ){

                    $aInfo = $group_model->getGroupInfo(['menu_type' => $this->request->getPost('menu_type')]);
                    if(!empty($aInfo)){
                        $menu_type_title = '환경구성';
                        if( $aInfo['menu_type'] == 'notice' ) $menu_type_title = '안내문';
                        echo json_encode(['success' => false , 'msg' => $menu_type_title.'은 이미 등록되어 있습니다.' , 'csrf' => csrf_hash()]);
                        return false;
                    }

                }
            }
        }

        { //data set

            $user       = auth()->getUser();
            $eGroupEn   = new Group(); //entity
            $aInput     = $eGroupEn->getAttributes(); //set default data

            $aInput['category'] = $this->request->getPost('category');
            $aInput['title']    = $this->request->getPost('title');
            $aInput['use_flag'] = $this->request->getPost('use_flag');
            $aInput['view_type'] = $this->request->getPost('view_type');

            if($aInput['view_type'] == 'menu') $aInput['menu_type'] = $this->request->getPost('menu_type');

            unset($aInput['seq']);

            if($isUpdate){
                $_id                = $this->request->getPostGet('group_id');

                $aInput['mod_date'] = date('YmdHis');
                $aInput['mod_id']   = $user->id;
                $aInput['mod_ip']   = $this->request->getIPAddress();

                unset($aInput['reg_date']);
                unset($aInput['reg_ip']);
                unset($aInput['reg_id']);

            }else{
                $aInput['seq']      = 999;
                $aInput['reg_date'] = date('YmdHis');
                $aInput['reg_id']   = $user->id;
                $aInput['reg_ip']   = $this->request->getIPAddress();
            }

        }


        if($isUpdate) {
            $bRet = $group_model->update($_id, $aInput); //수정
            $group_id = $_id;
        }
        else {
            $bRet = $group_model->insert($aInput); //등록
            $group_id = $group_model->getInsertID();
        }

        if(empty($bRet)) {
            echo json_encode(['success' => false , 'msg' => "{$upsertTitle} 실패 [ERROR:204]\n잠시 후 다시 시도해주세요." , 'csrf' => csrf_hash() ]);
            return false;
        }


        unset($aInput); //기존 변수 초기화

        //start of transation
        $group_model->setTrans();

        { //mapping data

            $aInput = [
                  'group_id'    => $group_id
                , 'ok_arr'      => json_decode($this->request->getPost('ok_arr'), true)
                , 'no_arr'      => json_decode($this->request->getPost('no_arr'), true)
                , 'category'    => $this->request->getPost('category')
            ];

            $user = auth()->getUser();
            $key_value = in_array($aInput['category'], ['bg', 'clip']) ? 'clip_id' : 'template_id';

            if ($isUpdate) { //기존 mapping data 삭제
                $ret = $group_model->del_mapp($aInput['category'], $group_id);;
                if(!$ret){
                    echo json_encode(['success' => false , 'msg' => "{$upsertTitle} 실패 [ERROR:205]\n잠시 후 다시 시도해주세요." , 'csrf' => csrf_hash() ]);
                    return false;
                }
            }

            foreach ($aInput['ok_arr'] as $k => $v) { //ok
                $aMappData = [
                      'seq' => (int)$k + 1
                    , $key_value => $v
                    , 'group_id' => $aInput['group_id']
                    , 'user_ip' => $this->request->getIPAddress()
                    , 'user_id' => $user->id
                ];
                $group_model->insert_mapp($aMappData);
            }

            foreach ($aInput['no_arr'] as $k => $v) { //ok
                $aMappData = [
                      'seq' => 999
                    , $key_value => $v
                    , 'group_id' => $aInput['group_id']
                    , 'user_ip' => $this->request->getIPAddress()
                    , 'user_id' => $user->id
                ];
                $group_model->insert_mapp($aMappData);
            }

        }//end of mappingdata

        //end of transation
        $group_model->completeTrans();

        if($group_model->statusTrans() === false){//db error & rollback
            $bRet = false;
        }


        if(empty($bRet)) echo json_encode(['success' => false , 'msg' => "{$upsertTitle} 실패.\n잠시 후 다시 시도해주세요." , 'csrf' => csrf_hash() ]);
        else echo json_encode(['success' => true , 'msg' => "정상적으로 {$upsertTitle}이 완료되었습니다." , 'error_msg' => [] , 'csrf' => csrf_hash()]);
        return true;

    }

    public function delete() :ResponseInterface
    {

        $aId    = $this->request->getPostGet('id_arr');

        if(empty($aId)){
            return $this->response->setJSON(['success' => false , 'msg' => "삭제할 데이터를 선택해주세요!", 'csrf' => csrf_hash()]);
        }

        if(!is_array($aId)){
            return $this->response->setJSON(['success' => false , 'msg' => lang('Security.disallowedAction'), 'csrf' => csrf_hash()]);
        }

        $group_model = new GroupModel();
        $bRet        = $group_model->delete($aId);

        if($bRet) $ret = json_encode(['success' => true , 'msg' => '삭제가 완료되었습니다.' , 'csrf' => csrf_hash()]);
        else $ret = json_encode(['success' => false , 'msg' => '삭제도중 문제가 발생하였습니다.', 'csrf' => csrf_hash()]);

        return $this->response->setJSON($ret);

    }

    public function changePaid() : ResponseInterface
    {


        $template_id = $this->request->getPost('template_id');

        $template_model = new TemplateModel();

        $aInfo = $template_model->where('template_id' , $template_id)->asArray()->first();

        $aInfo['paid_yn'] = $aInfo['paid_yn'] == 'Y' ? 'N' : 'Y';
        $aInfo['mod_id'] = auth()->id();
        $aInfo['mod_date'] = date('YmdHis');
        $aInfo['mod_ip'] = $this->request->getIPAddress();

        try {

            if(empty($aInfo)){
                throw new \Exception('템플릿 정보가 없습니다.');
            }

            $enTemplate = new Template();
            $enTemplate->fill($aInfo);

            $bRet = $template_model->save($enTemplate);

            if(!$bRet){
                throw new \Exception('유/무료 정보를 변경하던 중 문제가 발생했습니다.');
            }

            $ret = ['success' => true , 'msg' => '' , 'paid_yn' => $aInfo['paid_yn']];

        }catch (\Exception $e){

            $ret = ['success' => false , 'msg' => $e->getMessage() ];

        }

        return $this->response->setJSON($ret);

    }


    private function getListTot($aInput = []) : int
    {
        $group_model = new GroupModel();
        $nLists = $group_model->getGroupList($aInput,true);
        $nLists = array_shift($nLists);
        if(empty($nLists)) $nLists = 0;

        return (int)$nLists;
    }

}