<?php
namespace App\Controllers;

use App\Models\QnaModel;
use App\Models\UserModel;
use CodeIgniter\HTTP\RequestInterface;
use CodeIgniter\HTTP\ResponseInterface;
use Psr\Log\LoggerInterface;

class QnaManagement extends BaseController
{
    public $pager;
    public $page        = 1; //페이지
    public $per_page    = 30; //페이지당 노출row
    public $prev_dir;

    public function initController(RequestInterface $request, ResponseInterface $response, LoggerInterface $logger)
    {
        parent::initController($request, $response, $logger); // TODO: Change the autogenerated stub
        $this->pager = \Config\Services::pager();
        $this->prev_dir = 'notice/'.date('Ymd').'/';
    }

    public function index()
    {
        $aInput     = [];
        $nList      = self::getListTot($aInput);
        $tot_page   = ceil( $nList / $this->per_page );

        $view_data = [
                'tot_page'  => $tot_page
            ,   'per_page'  => $this->per_page
            ,   'uniqId'    => $this->request->getPostGet('id')
        ];

        $this->_header();
        echo view('qna/list', $view_data);
        $this->_footer();

    }
    public function upsertForm()
    {

        helper('number');
        
        $aInput       = [ 'qna_id'   => $this->request->getPostGet('qna_id') ];
        $title        = '공지 등록';

        $enQna   = New \App\Entities\Qna();
        $aQnaInfo = $enQna->getAttributes();

        if(empty($aInput['qna_id']) == false){ //update

            $qna_model = new QnaModel();
            $aQnaInfo = $qna_model->asArray()->find($aInput['qna_id']);
            $title      = '공지 수정';
        }

        echo view('qna/upsert_form', [ 'data' => $aQnaInfo , 'title' => $title ] );

    }

    public function upsert() : ResponseInterface
    {

        isAjaxCheck();

        $qna_model = new QnaModel();

        //validation
        $rules          = [
                'id'     => 'required|numeric'
            ,   'answer' => 'required'
        ];
        $upsertTitle        = '1:1문의 수정';

        if (! $this->validate($rules))
        {
            return $this->response->setJSON(['success' => false , 'msg' => '' , 'error_msg' => $this->validator->getErrors()]);
        }

        $aInput['qna_id'] = $this->request->getPostGet('id');

        $aQnaInfo         = $qna_model->find($aInput['qna_id']);
        if(empty($aQnaInfo) == true){
            return $this->response->setJSON(['success' => false , 'msg' => "정상적인 정보가 아닙니다.\n잠시 후 다시 진행해주세요."]);
        }

        $aInput['answer']       = $this->request->getPostGet('answer');
        $aInput['answer_date']  = date('YmdHis');
        $aInput['answer_id']    = auth()->id();

        $enQna           = New \App\Entities\Qna($aInput);

        $ret_id = $qna_model->save($enQna); //수정

        if(empty($ret_id) == true) {
            $ret = ['success' => false, 'msg' => "{$upsertTitle} 실패.\n잠시 후 다시 시도해주세요.\nErrorMsg : ".json_encode($qna_model->errors(),JSON_UNESCAPED_UNICODE) , 'error_msg' => $qna_model->errors() ];
        }

        else $ret = ['success' => true , 'msg' => "정상적으로 {$upsertTitle}이 완료되었습니다." , 'error_msg' => []];

        return $this->response->setJSON($ret);

    }

    public function delete($type) : ResponseInterface
    {

        isAjaxCheck();

        $qna_model = new QnaModel();

        try {

            $aQnaId    = $this->request->getPostGet('qna_id_arr');

            if(empty($aQnaId) == true){
                throw new \Exception("삭제할 데이터를 선택해주세요!");
            }

            if(is_array($aQnaId) == false){
                throw new \Exception(lang('Security.disallowedAction'));
            }
            $aInput = [
                    'qna_id'  => $aQnaId
                ,   'del_date'  => date('YmdHis')
                ,   'del_id'    => auth()->id()
            ];

            $bRet = $qna_model->del($aInput);

            if(!$bRet) throw new \Exception('삭제도중 문제가 발생하였습니다.');


        } catch(\Exception $e) {
            return $this->response->setJSON(['success' => false , 'msg' => $e->getMessage()]);
        }

        return $this->response->setJSON(['success' => true , 'msg' => '삭제가 완료되었습니다.']);

    }

    public function lists_ajax()
    {
        isAjaxCheck();
        $qna_model = new QnaModel();
        $aInput = [
                'search_text'   => $this->request->getPostGet('search_text')
            ,   'search_type'   => $this->request->getPostGet('search_type')
            ,   'top_fix'       => $this->request->getPostGet('top_fix')
            ,   'del_yn'        => $this->request->getPostGet('del_yn')
        ];
        if( empty($aInput['del_yn']) ) $aInput['del_yn'] = 'N';
        $set_page           = $this->request->getPostGet('page') ?? $this->page;
        $set_per_page       = $this->request->getPostGet('per_page') ?? $this->per_page;

        $nQnaList         = self::getListTot($aInput);
        $pagination_html    = $this->pager->makeLinks($set_page,$set_per_page,$nQnaList);
        $tot_page           = $nQnaList / $set_per_page;
        $tot_page           = $tot_page ?? 1;
        $s_limit            = ($set_page - 1) * $set_per_page >= 0 ? ($set_page - 1) * $set_per_page : 0 ;

        $aQnaList         = $qna_model->getQnaList($aInput , false , $s_limit , $set_per_page );

        foreach ($aQnaList as $k => $r) {
            $aQnaList[$k]['VNO'] = $nQnaList - ( ($set_page - 1) * $set_per_page ) - $k;
        }

        $view_data = [
                'data'              => $aQnaList
            ,   'pagination_html'   => $pagination_html
            ,   'tot_page'          => $tot_page
            ,   'tot_cnt'           => $nQnaList
            ,   'per_page'          => $set_per_page
        ];

        echo view('qna/list_ajax', $view_data);

    }

    public function chkReqQnaCnt() : ResponseInterface
    {
        $qna_model = new QnaModel();
        $nCnt = $qna_model->where('answer_date IS NULL', null, false)->where(['del_yn' => 'N'])->countAllResults();
        $ret = ['success' => true , 'cnt' => $nCnt, 'csrf' => csrf_hash() ];
        return $this->response->setJSON($ret);
    }

    private function getListTot($aInput) : int
    {
        $qna_model = new QnaModel();
        $nQnaList         = $qna_model->getQnaList($aInput,true);
        return (int)$nQnaList['cnt'];
    }

}
