<?php
namespace App\Controllers;

use App\Entities\Clip;
use App\Entities\Template;
use App\Libraries\CustomImageLib;
use App\Libraries\CustomUploadsLib;
use App\Models\TemplateModel;
use CodeIgniter\HTTP\RequestInterface;
use CodeIgniter\HTTP\ResponseInterface;
use CodeIgniter\I18n\Time;
use Psr\Log\LoggerInterface;

class TemplateManagement extends BaseController
{
    public $pager;
    public $page        = 1; //페이지
    public $per_page    = 30; //페이지당 노출row

    public function initController(RequestInterface $request, ResponseInterface $response, LoggerInterface $logger)
    {
        parent::initController($request, $response, $logger); // TODO: Change the autogenerated stub
        $this->pager = \Config\Services::pager();
    }

    public function index()
    {

        $aInput     = [];
        $nList      = self::getListTot($aInput);
        $tot_page   = ceil( $nList / $this->per_page );

        $view_data = [
                'tot_page'  => $tot_page
            ,   'per_page'  => $this->per_page
            ,   'uniqId'    => $this->request->getPostGet('id')
        ];

        $this->_header();
        echo view('template/index' , $view_data);
        $this->_footer();

    }

    public function lists_ajax(): string
    {

        isAjaxCheck();

        $aInput = [
                'search_text'   => $this->request->getPostGet('search_text')
            ,   'search_type'   => $this->request->getPostGet('search_type')
            ,   'category'      => $this->request->getPostGet('category')
            ,   'rotate'        => $this->request->getPostGet('rotate')
            ,   'use_flag'      => $this->request->getPostGet('use_flag')
        ];

        $set_page           = $this->request->getPostGet('page') ?? $this->page;
        $set_per_page       = $this->request->getPostGet('per_page') ?? $this->per_page;

        $nTemplateLists        = $this->getListTot($aInput);

        $pagination_html    = $this->pager->makeLinks($set_page,$set_per_page,$nTemplateLists);
        $tot_page           = ceil($nTemplateLists / $set_per_page);
        $tot_page           = $tot_page ?? 1;
        $s_limit            = max(($set_page - 1) * $set_per_page, 0);

        $template_model = new TemplateModel();
        $aTemplateLists = $template_model->getTemplateList($aInput, false , $s_limit , $set_per_page);

        foreach ($aTemplateLists as $k => $r) {
            $aTemplateLists[$k]['VNO'] = $nTemplateLists - ( ($set_page - 1) * $set_per_page ) - $k;
            unset($aTemplateLists[$k]['blob_data']);
        }

        $view_data = [
                'data'                  => $aTemplateLists
            ,   'pagination_html'       => $pagination_html
            ,   'tot_page'              => $tot_page
            ,   'tot_cnt'               => $nTemplateLists
            ,   'per_page'              => $set_per_page
        ];

        return view('template/lists_ajax' , $view_data);

    }

    public function getList(): ResponseInterface
    {

        $aInput = [
                'search_text' => $this->request->getPost('search_text')
            ,   'rotate' => $this->request->getPost('rotate')
        ];

        $tempate_model = new TemplateModel();
        $aList = $tempate_model->getTemplateList($aInput, false, 0, 9999);

        foreach ($aList as $k => $r) {
            unset($aList[$k]['blob_data']);
        }

        return $this->response->setJSON(['success'=> true , 'msg' => '' , 'data' => $aList]);

    }

    public function upsertForm(): string
    {

        isAjaxCheck();
        helper('number');

        $isUpdate       = false;
        $title          = '템플릿 정보';
        $eTemplateEn    = new Template(); //dummy
        $aTemplateInfo  = $eTemplateEn->getAttributes();
        $aTemplateInfo['template_id'] = '';

        $aInput = ['template_id' => $this->request->getPostGet('id')];
        if(!empty($this->request->getPostGet('id'))){ //update
            $template_model = new TemplateModel();
            $aTemplateInfo = $template_model->getTemplateInfo($aInput);
            unset($aTemplateInfo['blob_data']);
            $isUpdate = true;
        }

        $view_data = [
             'title' => $title
            ,   'data'  => $aTemplateInfo
            ,   'isUpdate'  => $isUpdate
        ];

        return view('template/upsert_form',  $view_data);

    }

    public function upsert(): bool
    {
        ini_set('memory_limit', '-1');

        $isUpdate       = false; //insert | update
        $upsertTitle    = '템플릿 등록';
        $template_model = new TemplateModel();

        {//validation

            //default validation rules
            if($this->request->getPost('save_type') == 'form'){ //관리자
                $rules = [ 'title'    => 'required' ];
            }else if($this->request->getPost('save_type') == 'template'){ //템플릿
                $rules = [
                        'title'         => 'required'
                    ,   'template_id'   => 'required|numeric'
                    ,   'page'          => 'required|numeric'
                    ,   'rotate'        => 'required|in_list[L,P,S]'
                    ,   'thumb_file'    => 'required'
                    ,   'blob_data'     => 'required'
                ];
            }

            if( $this->request->getPostGet('template_id') ){ //update

                //add validation
                $rules['use_flag']      = 'required|in_list[Y,I,N]';

                $isUpdate       = true;
                $upsertTitle    = '템플릿 수정';

                $aInfo = $template_model->getTemplateInfo(['template_id' => $this->request->getPostGet('template_id') ]);

                if(empty($aInfo)){
                    echo json_encode(['success' => false , 'msg' => "정상적인 정보가 아닙니다.\n새로고침 후 다시 진행해주세요.", 'csrf' => csrf_hash()]);
                    return false;
                }

            }

            if (! $this->validate($rules))
            {
                echo json_encode(['success' => false , 'msg' => '' , 'error_msg' => $this->validator->getErrors(), 'csrf' => csrf_hash()]);
                return false;
            }

        }

        { //data set

            $user       = auth()->getUser();

            $eTemplateEn = new Template(); //entity
            $aInput      = $eTemplateEn->getAttributes(); //set default data

            $aInput['title']    = $this->request->getPost('title');
            $aInput['keyword']  = $this->request->getPost('keyword');
            $aInput['use_flag'] = $this->request->getPost('use_flag')??'N';
            $aInput['paid_yn']  = $this->request->getPost('paid_yn');

            if($isUpdate){
                $_id                = $this->request->getPostGet('template_id');

                if($this->request->getPost('save_type') == 'template'){
                    //$aInput['blob_data']    = $this->request->getPostGet('blob_data');
                    //CORS 로 인한 도메인제거
                    $base_url               = rtrim(base_url(),'/');
                    $blob_data              = str_replace($base_url,'',$this->request->getPostGet('blob_data'));
                    $aInput['blob_data']    =  $blob_data;

                    $aInput['page']         = $this->request->getPostGet('page');
                    $aInput['rotate']       = $this->request->getPostGet('rotate');
                    unset($aInput['keyword']); //템플릿 수정 시 키워드 제거
                }else{
                    unset($aInput['thumb_file']);
                    unset($aInput['blob_data']);
                    unset($aInput['page']);
                    unset($aInput['rotate']);
                }


                $aInput['mod_date'] = date('YmdHis');
                $aInput['mod_id']   = $user->id;
                $aInput['mod_ip']   = $this->request->getIPAddress();

                unset($aInput['hit']);
                unset($aInput['reg_date']);
                unset($aInput['reg_ip']);
                unset($aInput['reg_id']);

            }else{
                $aInput['reg_date'] = date('YmdHis');
                $aInput['reg_id']   = $user->id;
                $aInput['reg_ip']   = $this->request->getIPAddress();
            }

        }

        if($this->request->getPost('save_type') == 'template') //템플릿 등록인 경우 썸네일 자동생성
        {

            { // data to file
                $sFilePrefix = getRandomFileName('.png');
                $tmpPath = '/tmp';
                $basePath = DOCROOT . '/file/design_canvas/template/' . date('Y/m/d');
                $tmpfull_filePath = $tmpPath . '/' . $sFilePrefix;
                $aImgData = json_decode($_POST["thumb_file"]);
                $img = $aImgData[0];
                $img = str_replace('data:image/png;base64,', '', $img);
                $img = str_replace(' ', '+', $img);
                $data = base64_decode($img);
                $success = file_put_contents($tmpfull_filePath, $data);
            }

            if(!$success){
                echo json_encode(['success' => false , 'msg' => "이미지 썸네일 생성중 문제가 발생하였습니다." , 'csrf' => csrf_hash() ]);
                return false;
            }

            $aImgInput = [
                    'act'       => 'change'
                ,   'path'      => $tmpfull_filePath
                ,   'file_name' => $sFilePrefix
                ,   'type'      => 'template'
                ,   'h'         => 300
            ];

            $oImage     = new CustomImageLib(); //이미지 변환 library
            $aResizeImg = $oImage->resize_h($aImgInput);

            if($aResizeImg['success'] == false){
                echo json_encode(['success' => false , 'msg' => "이미지 리사이징 중 문제가 발생했습니다." , 'csrf' => csrf_hash() ]);
                return false;
            }

            $aInput['thumb_file'] = $aResizeImg['data'];

        }


        if($isUpdate) $bRet = $template_model->update($_id,$aInput); //수정
        else $bRet = $template_model->insert($aInput); //등록

        if(empty($bRet)) echo json_encode(['success' => false , 'msg' => "{$upsertTitle} 실패.\n잠시 후 다시 시도해주세요." , 'csrf' => csrf_hash() ]);
        else echo json_encode(['success' => true , 'msg' => "정상적으로 {$upsertTitle}이 완료되었습니다." , 'error_msg' => [] , 'csrf' => csrf_hash()]);
        return true;

    }

    public function delete(): bool
    {
        $aId    = $this->request->getPostGet('id_arr');

        if(empty($aId)){
            echo json_encode(['success' => false , 'msg' => "삭제할 데이터를 선택해주세요!", 'csrf' => csrf_hash()]);
            return false;
        }

        if(!is_array($aId)){
            echo json_encode(['success' => false , 'msg' => lang('Security.disallowedAction'), 'csrf' => csrf_hash()]);
            return false;
        }

        $template_model      = new TemplateModel();
        $bRet = $template_model->delete($aId);

        if($bRet) echo json_encode(['success' => true , 'msg' => '삭제가 완료되었습니다.' , 'csrf' => csrf_hash()]);
        else echo json_encode(['success' => false , 'msg' => '삭제도중 문제가 발생하였습니다.', 'csrf' => csrf_hash()]);

        return true;

    }

    public function copyTemplate() : ResponseInterface
    {

        $aInput = [
            'template_id' => $this->request->getPost('template_id')
        ];

        $enTempalte = new Template();
        $tempalte_model     = new TemplateModel();
        $aInfo              = $tempalte_model->asArray()->find($aInput['template_id']);

        $aInfo['title']     = $aInfo['title'].' - 복사본';
        $aInfo['use_flag']  = 'N'; //복사대상은 사용안함 강제처리
        $aInfo['reg_date']  = date('YmdHis');
        $aInfo['reg_ip']    = $this->request->getIPAddress();
        $aInfo['reg_id']    = auth()->id();

        unset($aInfo['template_id']);
        unset($aInfo['mod_date']);
        unset($aInfo['mod_ip']);
        unset($aInfo['mod_id']);
        unset($aInfo['old_pk']);

        $enTempalte->fill($aInfo);
        $ret = $tempalte_model->save($enTempalte);


        $resp = ['success' => false , 'msg' => '템플릿 복사 중 문제가 발생하였습니다.'];
        if($ret) $resp = ['success' => true , 'msg' => '템플릿 복사가 완료되었습니다.'];

        return $this->response->setJSON($resp);

    }


    private function getListTot($aInput = []) : int
    {
        $template_model = new TemplateModel();
        $nLists = $template_model->getTemplateList($aInput,true);
        $nLists = array_shift($nLists);
        if(empty($nLists)) $nLists = 0;

        return (int)$nLists;
    }

}