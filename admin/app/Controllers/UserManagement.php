<?php
namespace App\Controllers;

use App\Entities\User;
use App\Entities\UserExtraInfo;
use App\Models\PaymentModel;
use App\Models\UserExtraInfoModel;
use App\Models\UserModel;
use CodeIgniter\HTTP\RequestInterface;
use CodeIgniter\HTTP\ResponseInterface;
use CodeIgniter\Model;
use Psr\Log\LoggerInterface;

class UserManagement extends BaseController
{
    public $use_ip = [
        '175.209.219.82' //사내아이피
    ];

    public $pager;
    public $page        = 1; //페이지
    public $per_page    = 30; //페이지당 노출row


    public $isAbleSSO = false;

    public function initController(RequestInterface $request, ResponseInterface $response, LoggerInterface $logger)
    {
        parent::initController($request, $response, $logger); // TODO: Change the autogenerated stub

        //SSO 사용가능여부
        if( in_array($request->getServer('REMOTE_ADDR') , $this->use_ip) ) $this->isAbleSSO = true;
        $this->pager = \Config\Services::pager();

    }

    public function index()
    {

        $aInput     = [];
        $nList      = self::getListTot($aInput);
        $tot_page   = ceil( $nList / $this->per_page );

        $view_data = [
                'tot_page'  => $tot_page
            ,   'per_page'  => $this->per_page
            ,   'uniqId'    => $this->request->getPostGet('id')
        ];

        $this->_header();
        echo view('user/index' , $view_data);
        $this->_footer();

    }

    public function lists_ajax(): string
    {

        isAjaxCheck();

        $aInput = [
                'search_text'   => $this->request->getPostGet('search_text')
            ,   'search_type'   => $this->request->getPostGet('search_type')
        ];

        $set_page           = $this->request->getPostGet('page') ?? $this->page;
        $set_per_page       = $this->request->getPostGet('per_page') ?? $this->per_page;

        $nUserLists        = $this->getListTot($aInput);

        $pagination_html    = $this->pager->makeLinks($set_page,$set_per_page,$nUserLists);
        $tot_page           = ceil($nUserLists / $set_per_page);
        $tot_page           = $tot_page ?? 1;
        $s_limit            = max(($set_page - 1) * $set_per_page, 0);

        $user_model = new UserModel();
        $aUserLists = $user_model->getUserList($aInput, false , $s_limit , $set_per_page);


        foreach ($aUserLists as $k => $r) {
            $aUserLists[$k]['VNO'] = $nUserLists - ( ($set_page - 1) * $set_per_page ) - $k;
        }

        $view_data = [
                'data'                  => $aUserLists
            ,   'pagination_html'       => $pagination_html
            ,   'tot_page'              => $tot_page
            ,   'tot_cnt'               => $nUserLists
            ,   'per_page'              => $set_per_page
        ];

        return view('user/lists_ajax' , $view_data);

    }

    public function member_info_pop($pop_type): string
    {

        $aInput = [
            'user_id' => $this->request->getGet('id')
        ];


        $user_model = new UserModel();
        $aInfo = $user_model->asArray()->find($aInput['user_id']);
        $this->isAbleSSO = $aInfo['deleted_at'] ? false : true;
        $view_data = [
                'aInfo' => $aInfo
            ,   'isAbleSSO' => $this->isAbleSSO
        ];

        if($pop_type == 'member'){
            $view_file = 'user/popup/member_info_pop';
        }else if($pop_type == 'order'){

            $payment_model = new PaymentModel();
            $payment_list = $payment_model->where('user_id' , $aInput['user_id'])->asArray()->findAll();
            $view_data['aList'] = $payment_list;
            $view_file = 'user/popup/order_info_pop';

        }else if($pop_type == 'login'){

            $model = new Model();
            $auth_data = [
                    'identifier' => $aInfo['login_id']
                ,   'success' => 1
                ,   'id_type !=' => 'magic-link'
            ];
            $login_list = $model->setTable('auth_logins')->where($auth_data)->asArray()->findAll();
            $view_data['aList'] = $login_list;

            $view_file = 'user/popup/login_info_pop';
        }else if($pop_type == 'qna'){

            $model = new Model();
            $qna_data = [ 'user_id' => $aInfo['id'] ];
            $qna_list = $model->setTable('tb_qna')->where($qna_data)->asArray()->findAll();
            $view_data['aList'] = $qna_list;

            $view_file = 'user/popup/qna_info_pop';

        }

        return view($view_file,  $view_data);

    }

    public function upsertForm(): string
    {

        isAjaxCheck();

        $isUpdate       = false;
        $title          = '회원 등록';
        $eUserEn        = new User(); //dummy
        $aUserInfo      = $eUserEn->getAttributes();
        $aUserInfo['id'] = '';

        $aInput = ['id' => $this->request->getPostGet('id')];
        if(!empty($this->request->getPostGet('id'))){ //update
            $title          = '회원 수정';
            $user_model = new UserModel();
            $aUserInfo = $user_model->getUserInfo($aInput);
            $isUpdate = true;
            $this->isAbleSSO = $aUserInfo['deleted_at'] ? false : true;
        }

        $view_data = [
                'title' => $title
            ,   'data'  => $aUserInfo
            ,   'isUpdate'  => $isUpdate
            ,   'isAbleSSO'  => $this->isAbleSSO
        ];

        return view('user/upsert_form',  $view_data);

    }

    public function setCsMemo() : ResponseInterface
    {

        $aInput = [
                'user_id'   => $this->request->getPost('user_id')
            ,   'cs_memo'   => $this->request->getPost('cs_memo')
        ];

        $user_extra_model = new UserExtraInfoModel();
        $aInfo = $user_extra_model->asArray()->where('user_id' , $aInput['user_id'])->first();

        if($aInfo){
            $aInput['extra_id'] = $aInfo['extra_id'];
            $aInput['mod_date'] = date('Y-m-d H:i:s');
            $aInput['mod_id'] = auth()->id();
        }else{
            $aInput['reg_date'] = date('Y-m-d H:i:s');
            $aInput['reg_id'] = auth()->id();
        }

        $enUserExtra = new UserExtraInfo();
        $enUserExtra->fill($aInput);

        $oRet = $user_extra_model->save($enUserExtra);

        $resp = ['success' => false , 'msg' => '메모를 저장 중 문제가 발생하였습니다.'];
        if($oRet) $resp = ['success' => true , 'msg' => '메모이 완료되었습니다.'];

        return $this->response->setJSON($resp);

    }

    public function upsert() : ResponseInterface
    {


        $isUpdate       = false; //insert | update
        $upsertTitle    = '회원 등록';
        $user_model     = new UserModel();

        {//validation

            //default validation rules
            $rules          = [
                    'username'  => 'required'
                ,   'cell_tel1'  => 'required|numeric|min_length[3]|max_length[3]'
                ,   'cell_tel2'  => 'required|numeric|min_length[3]|max_length[4]'
                ,   'cell_tel3'  => 'required|numeric|min_length[4]|max_length[4]'
                ,   'email'     => 'required|valid_email'
//                ,   'active'    => 'required|in_list[0,1]'
            ];

            if( $this->request->getPostGet('id') ){ //update
                //add validation
                $rules['id']    = 'required';

                $isUpdate       = true;
                $upsertTitle    = '회원 수정';

                $aInfo = $user_model->getUserInfo(['id' => $this->request->getPostGet('id') ]);

                if(empty($aInfo)){
                    return $this->response->setJSON(['success' => false , 'msg' => "정상적인 정보가 아닙니다.\n새로고침 후 다시 진행해주세요.", 'csrf' => csrf_hash()]);
                }

                //비밀번호 필수아님
                if($this->request->getPostGet('password')){
                    $rules['password']          = 'required';
                    $rules['password_confirm']  = 'required|matches[password]';
                }

                $curl_type = 'update';

            }else{
                //비밀번호 필수
                $rules['login_id']          = 'required';
                $rules['password']          = 'required';
                $rules['password_confirm']  = 'required|matches[password]';

                $curl_type = 'insert';

            }

            if (! $this->validate($rules))
            {
                return $this->response->setJSON(['success' => false , 'msg' => '' , 'error_msg' => $this->validator->getErrors(), 'csrf' => csrf_hash()]);
            }

        }

        { //data set

            $aInput                 = [];
            $aInput['id']           = $this->request->getPost('id');
            $aInput['username']     = $this->request->getPost('username');
            $aInput['email']        = $this->request->getPost('email');
            $aInput['user_email']   = $this->request->getPost('email');
            $aInput['cell_tel']     = $this->request->getPost('cell_tel1').'-'.$this->request->getPost('cell_tel2').'-'.$this->request->getPost('cell_tel3');
//            $aInput['active']       = $this->request->getPost('active');
            $aInput['s_use_date']   = $this->request->getPost('s_use_date') ? onlynumber($this->request->getPost('s_use_date')) : '';
            $aInput['e_use_date']   = $this->request->getPost('e_use_date') ? onlynumber($this->request->getPost('e_use_date')) : '';
            $aInput['memo']         = $this->request->getPost('memo');


            if($this->request->getPost('password')) {
                $aInput['password'] = $this->request->getPost('password');
                $aInput['password_confirm'] = $this->request->getPost('password_confirm');
            }

            if($isUpdate) {
                $aInput['updated_id']   = auth()->id();
                $aInput['updated_ip']   = $this->request->getIPAddress();
            }else{
                $aInput['login_id']     = $this->request->getPost('login_id');
            }

        }

        $req_url = 'https://www.kindercanvas.co.kr/Api/setUser/'.$curl_type;

        $ch = curl_init();
        curl_setopt($ch, CURLOPT_URL, $req_url);
        curl_setopt($ch, CURLOPT_POST, true);
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
        curl_setopt($ch, CURLOPT_POSTFIELDS, $aInput);

        $response = curl_exec ($ch);
        $status_code = curl_getinfo($ch, CURLINFO_HTTP_CODE);
        curl_close ($ch);

//        zsView($status_code);
//        zsView($response);
        if($status_code != 200){
            return $this->response->setJSON(['success' => false , 'msg' => 'API통신 중 문제가 발생하였습니다. ERROR CODE : '.$status_code , 'error_msg' => '' , 'csrf' => csrf_hash()]);
        }

        $response = json_decode($response,true);
        $response['csrf'] = csrf_hash();
        $response['status_code'] = $status_code;

        return $this->response->setJSON($response);
    }


    private function getListTot($aInput) : int
    {

        $user_model = new UserModel();
        $nLists = $user_model->getUserList($aInput,true);
        $nLists = array_shift($nLists);
        if(empty($nLists)) $nLists = 0;

        return (int)$nLists;

    }

}