<?php
namespace App\Controllers;

use App\Models\UserModel;
use CodeIgniter\Events\Events;
use CodeIgniter\HTTP\RequestInterface;
use CodeIgniter\HTTP\ResponseInterface;
use CodeIgniter\Shield\Authentication\Authenticators\JWT;
use CodeIgniter\Shield\Authentication\Authenticators\Session;
use CodeIgniter\Shield\Entities\User;
use CodeIgniter\Shield\Exceptions\ValidationException;
use CodeIgniter\Shield\Models\LoginModel;
use Psr\Log\LoggerInterface;

define('LOGIN_PROCESS_ERR'      , '로그인 시도중 문제가 발생하였습니다.\n다시 시도해주세요.');
define('PROFILE_PROCESS_ERR'    , '서버로부터 회원정보를 받지 못했습니다.\n다시 시도해주세요.');

class Api extends BaseController
{
    public $NAVER_info = [ 'CALLBACK_URL' => 'Api/naver' ];
    public $KAKAO_info = [ 'CALLBACK_URL' => 'Api/kakao' ];
    public $arrayParams = [];

    public function initController(RequestInterface $request, ResponseInterface $response, LoggerInterface $logger)
    {
        parent::initController($request, $response, $logger); // TODO: Change the autogenerated stub
    }

    public function index($login_type = '') : ResponseInterface
    {

        if($login_type == '' || is_null($login_type)){
            return redirect()->to('/')->with('error' , '잘못된 접근입니다.[code: 403]');
        }

        if( method_exists($this, $login_type) == false ) {
            return redirect()->to('/')->with('error' , '잘못된 접근입니다.[code: 403-2]');
        }

        return $this->{$login_type}();

    }

    private function naver() : ResponseInterface
    {

        $client_id      = NAVER_CLIENT_KEY;
        $client_secret  = NAVER_SECRET_KEY;
        $code           = $this->request->getGet("code");
        $state          = $this->request->getGet("state");
        $redirectURI    = urlencode(base_url().$this->NAVER_info['CALLBACK_URL']);
        $url            = "https://nid.naver.com/oauth2.0/token?grant_type=authorization_code&client_id=".$client_id."&client_secret=".$client_secret."&redirect_uri=".$redirectURI."&code=".$code."&state=".$state;
        $is_post        = false;

        $ch = curl_init();
        curl_setopt($ch, CURLOPT_URL, $url);
        curl_setopt($ch, CURLOPT_POST, $is_post);
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
        $response = curl_exec ($ch);
        $status_code = curl_getinfo($ch, CURLINFO_HTTP_CODE);
        curl_close ($ch);

        if($status_code != 200) {
            return redirect()->to('/')->with('error' , LOGIN_PROCESS_ERR);
        }

        $data = json_decode($response, true);

        if(!isset($data['token_type']) && $data['error'] ){
            log_message('error' , 'API::naver > '.json_encode($data , JSON_UNESCAPED_UNICODE));
            log_message('error' , 'API::naver/$url > '.$url);

            return redirect()->to('/')->with('error' , LOGIN_PROCESS_ERR);
        }

        $headers    = array('Authorization: '.$data['token_type'].' '.$data['access_token']);
        $is_post    = false;

        $ch = curl_init();
        curl_setopt($ch, CURLOPT_URL, NAVER_GET_USERINFO_URL);
        curl_setopt($ch, CURLOPT_POST, $is_post);
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
        curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);

        $response = curl_exec ($ch);
        $status_code = curl_getinfo($ch, CURLINFO_HTTP_CODE);
        curl_close ($ch);

        if($status_code != 200) {
            return redirect()->to('/')->with('error' , PROFILE_PROCESS_ERR);
        }

        $profile = json_decode($response, true);

        $initInput = array(
            'sns_site'          => 2
        ,   'm_loginid_prv_str' => 'nv'
        ,   'access_token'      => $data['access_token']
        ,   'code'              => $code
        ,   'cmc_vcID'          => ''
        );

        $this->arrayParams = array_merge($initInput,$profile['response']);

        return $this->next();

    }

    private function next() : ResponseInterface
    {

        $user_model = new UserModel;

        //중복체크
        $aOverlapUser = $user_model->where(['user_email' => $this->arrayParams['email'] , 'login_id !=' => $this->arrayParams['m_loginid_prv_str'].'_'.$this->arrayParams['id'] ])->asArray()->first();
        if(empty($aOverlapUser) == false){
            return redirect()->route('RegisterController::email_overlap')->with('login_id', $aOverlapUser['id']);
        }

        //탈퇴체크
        $snsInfo = ['login_id' => $this->arrayParams['m_loginid_prv_str'].'_'.$this->arrayParams['id']];
        $aUserInfo = $user_model->checkSnsAcc($snsInfo);
        if(isset($aUserInfo) && $aUserInfo['deleted_at']){
            return redirect()->to('/')->with('error', '회원 탈퇴이력이 있는 계정입니다.');
        }

        //기존 회원 여부 확인
        $oUserInfo = $user_model->where(['login_id' => $this->arrayParams['m_loginid_prv_str'].'_'.$this->arrayParams['id'] ])->first();
        $isUser = $oUserInfo ? true : false;

        if($isUser == false){

            /* added register */
            unset($oUserInfo);

            $aInput = [
                    'user_email'    => $this->arrayParams['email']
                ,   'email'         => $this->arrayParams['email']
                ,   'username'      => $this->arrayParams['name']
                ,   'login_id'      => $this->arrayParams['m_loginid_prv_str'].'_'.$this->arrayParams['id']
                ,   'password'      => (string)$this->arrayParams['id']
                ,   'cell_tel'      => $this->arrayParams['mobile']
                ,   'sns_site'      => $this->arrayParams['sns_site']
//                ,   'sms_yn'        => 'N'
//                ,   'email_yn'      => 'N'
                ,   'advert_yn'     => 'N'
            ];

            if($this->arrayParams['cmc_vcID']){
                $aInput['cmc_vcID'] = $this->arrayParams['cmc_vcID'];
            }


            $enUser = new User();
            $enUser->fill($aInput);

            try {
                $user_model->save($enUser);
            } catch (ValidationException $e) {
                return redirect()->back()->withInput()->with('errors', $user_model->errors());
            }
            // To get the complete user object with ID, we need to get from the database
            $oUserInfo = $user_model->findById($user_model->getInsertID());

            // Add to default group
            $user_model->addToDefaultGroup($oUserInfo);

            Events::trigger('register', $oUserInfo);

        }

        if( auth()->loggedIn() ) {
            return redirect()->to('/')->with('error', '이미 로그인 중입니다.\\n다른 계정으로 로그인하시려면, 현재 계정을 로그아웃 후 다시 로그인해주세요');
        }

        /* start login */
        /** @var Session $authenticator */
        $authenticator = auth('session')->getAuthenticator();
        $authenticator->startLogin($oUserInfo);

        if($isUser == false) {
            // If an action has been defined for register, start it up.
            $hasAction = $authenticator->startUpAction('register', $oUserInfo);
            if ($hasAction) {
                return redirect()->route('auth-action-show');
            }

            // Set the user active
            $oUserInfo->activate();
        }

        if($isUser){//login
            $loginModel = new LoginModel();
            $loginModel->recordLoginAttempt(
                'sns_login',
                $oUserInfo->login_id,
                1,
                $this->request->getIPAddress(),
                $this->request->getUserAgent(),
                $oUserInfo->id
            );
        }

        $authenticator->completeLogin($oUserInfo);

        session()->set('s_use_date',$oUserInfo->s_use_date);
        session()->set('e_use_date',$oUserInfo->e_use_date);
        session()->set('isPay',$oUserInfo->e_use_date >= date('Ymd'));


        $return_url = '/';
        if($isUser == false)  $return_url = '/register/complete';

        return redirect()->to($return_url)->with('login_id', '__sns');

    }

    private function kakao() : ResponseInterface
    {

        $redirectURI    = urlencode(base_url().$this->KAKAO_info['CALLBACK_URL']);

        /*토큰 정보*/
        $code       = $this->request->getGet('code');
        $cmc_vcID   = $this->request->getGet('state');
        if(!$code){
            return redirect()->to('/')->with('error' , '잘못된 접근입니다.');
        }

        $is_post    = false;
        $url        = "https://kauth.kakao.com/oauth/token?grant_type=authorization_code&client_id=".KAKAO_CLIENT_KEY."&redirect_uri={$redirectURI}&code={$code}";

        $ch = curl_init();
        curl_setopt($ch, CURLOPT_URL, $url);
        curl_setopt($ch, CURLOPT_POST, $is_post);
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
        $response = curl_exec ($ch);
        $status_code = curl_getinfo($ch, CURLINFO_HTTP_CODE);
        curl_close ($ch);

        if($status_code != 200) {
            return redirect()->to('/')->with('error' , LOGIN_PROCESS_ERR);
        }

        $data = json_decode($response, true);
        /*토큰 정보 END*/

        /*회원 정보*/
        $headers[0]   = "Authorization: {$data['token_type']} {$data['access_token']}";
        $headers[]    = "Content-type: application/x-www-form-urlencoded;charset=utf-8'";
        $is_post      = false;

        $ch = curl_init();
        curl_setopt($ch, CURLOPT_URL, KAKAO_GET_USERINFO_URL); // V2로 변경
        curl_setopt($ch, CURLOPT_POST, $is_post);
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
        curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);

        $response = curl_exec ($ch);
        $status_code = curl_getinfo($ch, CURLINFO_HTTP_CODE);
        curl_close ($ch);

        if($status_code != 200) {
            return redirect()->to('/')->with('error' , PROFILE_PROCESS_ERR);
        }

        $tmpProfile = json_decode($response, true);

        $profile = array(
            'id'        => $tmpProfile['id']
        ,   'nickname'  => $tmpProfile['properties']['nickname']
        ,   'email'     => $tmpProfile['kakao_account']['has_email'] ? $tmpProfile['kakao_account']['email'] : ''
        ,   'mobile'    => $tmpProfile['kakao_account']['has_phone_number'] ? str_replace('+82 ','0',$tmpProfile['kakao_account']['phone_number'])  : ''
        );

        /*회원 정보 END*/

        $initInput = array(
            'sns_site'        => 1
        //,   'm_loginid_prv_str' => $cmc_vcID ? 'cmc_ka' : 'ka' //cmc_ 여부가 의미없음 & 로그인시 로그인아이디로 확인하는데, 문제발생
        ,   'm_loginid_prv_str' => 'ka'
        ,   'access_token'      => $data['access_token']
        ,   'code'              => $code
        ,   'name'              => $profile['nickname']
        ,   'cmc_vcID'          => $cmc_vcID
        );

        $this->arrayParams = array_merge($initInput,$profile);

        return $this->next();

    }

    /**
     * @var string $type '회원 처리 action : insert | update '
     **/
    public function setUser($type = '') : ResponseInterface
    {

//        log_message('error' , 'Api/setUser :: '.$type.' :: '.json_encode($this->request->getPost()));

        //회원가입 validation
        if($type == 'insert') $rules = setting('Validation.registration');
        else if($type == 'update') $rules = setting('Validation.user_modify');
        else return $this->response->setJSON(['success' => false , 'msg' => '필수입력정보 누락 : $type' , 'error_msg' => '']);

        if (! $this->validateData($this->request->getPost(), $rules, [], config('Auth')->DBGroup)) {
            return $this->response->setJSON(['success' => false , 'msg' => '' , 'error_msg' => $this->validator->getErrors() ]);
        }

        /*기존 회원 여부 확인*/
        if($type == 'insert'){
            /* added register */

            $aInput = [
                    'user_email'    => $this->request->getPost('user_email')
                ,   'email'         => $this->request->getPost('email')
                ,   'username'      => $this->request->getPost('username')
                ,   'login_id'      => $this->request->getPost('login_id')
                ,   'password'      => $this->request->getPost('password')
                ,   'cell_tel'      => $this->request->getPost('cell_tel')
//                ,   'sms_yn'        => 'N'
//                ,   'email_yn'      => 'N'
                ,   'advert_yn'     => 'N'
                ,   'active'        => 1//$this->request->getPost('active')
                ,   'memo'          => $this->request->getPost('memo')
                ,   's_use_date'    => $this->request->getPost('s_use_date')
                ,   'e_use_date'    => $this->request->getPost('e_use_date')
            ];

        }else{ // update

            $aInput = [
                    'user_email'    => $this->request->getPost('user_email')
                ,   'email'         => $this->request->getPost('email')
                ,   'username'      => $this->request->getPost('username')
                ,   'cell_tel'      => $this->request->getPost('cell_tel')
                ,   'active'        => 1//$this->request->getPost('active')
                ,   's_use_date'    => $this->request->getPost('s_use_date')
                ,   'e_use_date'    => $this->request->getPost('e_use_date')
                ,   'memo'          => $this->request->getPost('memo')
                ,   'updated_id'    => $this->request->getPost('updated_id')
                ,   'updated_ip'    => $this->request->getPost('updated_ip')

                ,   'id'            => $this->request->getPost('id')
            ];

            if($this->request->getPost('password')) $aInput['password'] = $this->request->getPost('password');

        }

        $user_model = new UserModel;
        $enUser     = new User();
        $enUser->fill($aInput);

        try {
            $user_model->save($enUser);
        } catch (ValidationException $e) {
            return $this->response->setJSON(['success' => false , 'msg' => '' , 'error_msg' => $user_model->errors() ]);
        }

        if($type == 'insert') {
            // To get the complete user object with ID, we need to get from the database
            $oUserInfo = $user_model->findById($user_model->getInsertID());

            // Add to default group
            $user_model->addToDefaultGroup($oUserInfo);

            Events::trigger('register', $oUserInfo);
        }



        return $this->response->setJSON(['success' => true , 'msg' => '' , 'error_msg' => '' ]);

    }

    public function event($gubun) : ResponseInterface
    {

        try {

            if($gubun == 'kakao'){

                $row_data = $this->request->getBody();
                $data_arr = explode('.',$row_data);

                $header_info = json_decode(base64_decode($data_arr[0]) , true);
                $payload     = json_decode(base64_decode($data_arr[1]) , true);

//                카카오 공개키 가져오기
//                $kakao_public_key_url = 'https://kauth.kakao.com/.well-known/jwks.json';
//                $ch = curl_init();
//                curl_setopt($ch, CURLOPT_URL, $kakao_public_key_url);
//                curl_setopt($ch, CURLOPT_POST, false);
//                curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
//                $response = curl_exec($ch);
//                $status_code = curl_getinfo($ch, CURLINFO_HTTP_CODE);
//                curl_close ($ch);
//
//                if($status_code != 200) { //공개 키 발급안됨
//                    throw new \Exception('Api::event $gubun:'.$gubun.' | msg : `OIDC: 공개키 획득 실패` ');
//                }
//
//                $public_keys = json_decode($response,true);

                // https://developers.kakao.com/docs/latest/ko/kakaologin/sse#callback-verify-set
                // 인증처리 해야함


                $login_id   = 'ka_'.$payload['sub'];
                $user_model = new UserModel();
                $aUserInfo  = $user_model->asArray()->where(['login_id' => $login_id])->first();

                if($aUserInfo){
                    // 연결해제한 회원 정보가 있는 경우 처리에 대한 논의 필요 탈퇴 or anything
                    log_message('error' , 'Api::event $gubun:'.$gubun.' | 카카오연결해제 | data : '.json_encode($aUserInfo,JSON_UNESCAPED_UNICODE));
                }else{
                    throw new \Exception('Api::event $gubun:'.$gubun.' | msg : 연결된 회원정보가 없습니다.');
                }

            }

        } catch (\Exception $e){

            log_message('error' , $e->getMessage());
            log_message('error' , 'bodydata > '.$this->request->getBody());

            return $this->response->setStatusCode(400, json_encode(['err' => 'unkown' , 'description' => 'unkown' ]));

        }

        return $this->response->setStatusCode(202, '202 Accepted');


    }

}