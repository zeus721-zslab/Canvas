<?php
namespace App\Controllers;

use App\Models\CanvasModel_v2;
use CodeIgniter\HTTP\RequestInterface;
use CodeIgniter\HTTP\ResponseInterface;
use Psr\Log\LoggerInterface;

class Canvas extends BaseController
{

    public function initController(RequestInterface $request, ResponseInterface $response, LoggerInterface $logger)
    {
        parent::initController($request, $response, $logger); // TODO: Change the autogenerated stub
    }

    public function index() : string
    {

        $user = auth()->getUser();

        $aData = [
                'nCanvasWidth' => 1100
            ,   'nCanvasHeight' => 778
            ,   'zoom' => 0.7
            ,   'emRotate' => 'L'
            ,   'aInput' => [
                    'type'          => ''
                ,   'my_canvas_id'  => ''
                ,   'template_id'   => ''
                ,   'user_id'       => $user->id ?? 1
            ]
        ];

        if(isset($_GET["e"])){
            // YmdHis_new_nIdx_nLoadIdx
            $encrypter          = \Config\Services::encrypter();
            $eEnc               = $this->request->getGet('e');
            $strEnc             = $encrypter->decrypt($eEnc);
            $aEnc               = explode("_",$strEnc);
            $aData['aInput']["type"]            = $aEnc[1];
            $aData['aInput']["my_canvas_id"]    = $aEnc[2];
            $aData['aInput']["template_id"]     = $aEnc[3];

            $canvas_model = new CanvasModel_v2();

            //my보관함 - 이전 작업내용 불러오기
            if($aData['aInput']["type"] == 'load') {

                $input_my_data = [
                        'my_canvas_id'  => $aData['aInput']["my_canvas_id"]
                    ,   'user_id'       => $aData['aInput']["user_id"]
                ];
                $aData['aInfo'] = $canvas_model->getMyData($input_my_data);
            }
            else $aData['aInfo'] = $canvas_model->getTemplateInfo(['template_id' => $aData['aInput']["template_id"]]); // 템플릿클릭 - 템플릿불러오기

            $aData['emRotate'] = $aData['aInfo']['rotate'];

        }
        if($aData['emRotate'] == 'P'){
            $aData['nCanvasWidth'] = '778';
            $aData['nCanvasHeight'] = '1100';
            $aData['zoom'] = 0.6;
        }else if($aData['emRotate'] == 'S'){
            $aData['nCanvasWidth'] = '778';
            $aData['nCanvasHeight'] = '778';
        }

        return view('canvas/index' , $aData);

    }

    public function slide() : string
    {
        $aSlideData = json_decode($this->request->getPostGet('aSlideData'),true);
        return view('canvas/slide' , ['aSlideData' => $aSlideData]);
    }


    public function save()
    {
    }

    public function download()
    {

        $user           = auth()->getUser();
        $user_id        = $user->id;
        $sFilePrefix    = sprintf("%s_%04d",date('YmdHis'),rand(0,9999));
        $tempDir        = WRITEPATH.'tmp/'.$user_id.'_'.rand(0,9999);
        $ret            = @mkdir($tempDir);

        if(!$ret){
            top_alert_script('임시 폴더를 생성 중 문제가 발생하였습니다.');
            log_message('error' , 'Canvas::download Create folder ERROR');
            return false;
        }

        $err            = false;
        $aImgData       = json_decode($_POST["aImgData"] , true);

        foreach($aImgData as $sIdx => $sImgData){
            $img = str_replace('data:image/png;base64,', '', $sImgData);
            $img = str_replace(' ', '+', $img);
            $data = base64_decode($img);
            $file = sprintf("%s/page_%02d.png",$tempDir,$sIdx);
            $success = file_put_contents($file, $data);
            if($success == false) $err = true;
        }

        if($err){

            top_alert_script('이미지 파일을 생성 중 문제가 발생하였습니다.');
            log_message('error' , 'Canvas::download Create Images ERROR');
            return false;

        }else{

            $sCmd = sprintf("cd %s && /usr/bin/zip -r %s.zip * ",$tempDir,$sFilePrefix );
            shell_exec($sCmd); //압축 실행

            $fileFullPath = $tempDir.'/'.$sFilePrefix.'.zip'; //압축파일 전체경로
            header('Content-Description: File Transfer');
            header('Content-Type: application/octet-stream');
            header('Content-Disposition: attachment; filename='.basename($fileFullPath));
            header('Content-Transfer-Encoding: binary');
            header('Expires: 0');
            header('Cache-Control: must-revalidate');
            header('Pragma: public');
            header('Content-Length: ' . filesize($fileFullPath));
            ob_clean();
            flush();

            if (readfile($fileFullPath))
            {
                helper('filesystem');
                delete_files($tempDir);//파일삭제
                @rmdir($tempDir);//폴더 삭제
            }

            return true;
        }

    }

    public function getSearchContents() : string
    {

        $aInput = [
            'type'          => $this->request->getPost('m')
            ,   'search_text'   => $this->request->getPost('str')
        ];

        $canvas_model = new CanvasModel_v2();

        if($aInput['type'] == '_clip'){ //요소

            $aSearch["category"]    = 'clip';
            $aSearch["search_text"] = $aInput['search_text'];
            $aList = $canvas_model->getClipGroupList($aSearch);

        }else if($aInput['type'] == '_bg'){ //배경

            $aSearch["category"] = 'bg';
            $aSearch["search_text"] = $aInput['search_text'];
            $aList = $canvas_model->getClipGroupList($aSearch);

        }else if($aInput['type'] == '_template'){ //템플릿 검색

            $aSearch["category"] = 'template';
            $aSearch["search_text"] = $aInput['search_text'];
            $aList = $canvas_model->getTemplateGroupList($aSearch);

        }

        return json_encode(['success' => true , 'msg' => '' , 'data' => $aList]);

    }


    //--------------------------- ajax call

    public function getContentsWrapPage() : string
    {

        $aInput = [
                'file'          => $this->request->getPost('type')
        ];
        $aSearch = [];

        $canvas_model = new CanvasModel_v2();

        if($aInput['file'] == '_template'){ //템플릿

            $aSearch["search_text"] = $this->request->getPost('strKeyword');

            $aSearch["category"] = 'template';
            $aGroup = $canvas_model->getGroupList($aSearch , false , 0 , 999);

            foreach ($aGroup as $k => $r) {
                $aSearch['group_id'] = $r['group_id'];
                $aList = $canvas_model->getTemplateGroupList($aSearch , false , 0 , 10);
                $aGroup[$k]['templates'] = $aList;
            }

            $aInput['aList'] = $aGroup;

        }else if($aInput['file'] == '_text'){ //텍스트

            $aInput['aFontSize'] = array(7,8,9,10,11,12,14,18,24,30,36,48,60,72,96,104,120,144);

        }else if($aInput['file'] == '_upload'){ //업로드 파일

            $user = auth()->getUser();
            $aSearch['user_id'] = $user->id;

            $aInput['aMyImg'] = $canvas_model->getMyImgList($aSearch);
            $aInput['ImageUrlPrefix'] = '/file/helper/ezcvs_user/';

        }else if($aInput['file'] == '_clip'){ //요소

            $aSearch["category"] = 'clip';
            $aGroup = $canvas_model->getGroupList($aSearch , false , 0 , 999);

            foreach ($aGroup as $k => $r) {
                $aSearch['group_id'] = $r['group_id'];
                $aList = $canvas_model->getClipGroupList($aSearch , false , 0 , 10);
                $aGroup[$k]['clips'] = $aList;
            }

            $aInput['aList'] = $aGroup;

        }else if($aInput['file'] == '_bg'){ //배경


            $aSearch["category"] = 'bg';
            $aGroup = $canvas_model->getGroupList($aSearch , false , 0 , 999);

            foreach ($aGroup as $k => $r) {
                $aSearch['group_id'] = $r['group_id'];
                $aList = $canvas_model->getClipGroupList($aSearch , false , 0 , 10);
                $aGroup[$k]['clips'] = $aList;
            }

            $aInput['aList'] = $aGroup;

        }

        return view('canvas/_parts/'.$aInput['file'] , $aInput);
    }

    public function getEzcvsData() : string
    {

        $canvas_model = new CanvasModel_v2();

        $aInput = [
                'loadType'  => $this->request->getPost('loadType')
            ,   'nLoadIdx'  => $this->request->getPost('nLoadIdx')
        ];


        if($_POST["nLoadIdx"] > 0){
            $emRotate = '';
            if(in_array($aInput["loadType"],array("template","new"))){
                $aTemplate = $canvas_model->getTemplateInfo(['template_id' => $aInput["nLoadIdx"]]);
                $sOriData = $aTemplate["blob_data"];
                $emRotate = $aTemplate['rotate'];
            }else if($aInput["loadType"] == 'load'){

                $user = auth()->getUser();
                $input_my_canvas = [
                        'my_canvas_id' => $aInput['nLoadIdx']
                    ,   'user_id'   => $user->id
                ];
                $aCanvas = $canvas_model->getMyData($input_my_canvas);
                $sOriData = $aCanvas["blob_data"];
                $emRotate = $aCanvas['rotate'];
            }

            $aBlob = json_decode($sOriData);
            $retBlob = implode("||",$aBlob);
            $RetVal['success'] = true;
            $RetVal['blob'] = $retBlob;
            $RetVal['emRotate'] = $emRotate;

        }else{

            $RetVal['success'] = true;
            $RetVal['blob'] = '';
            $RetVal['emRotate'] = '';

        }

        return json_encode($RetVal);

    }

}