<?php
namespace App\Controllers;

use App\Entities\MyCanvas;
use App\Entities\MyImg;
use App\Libraries\CustomImageLib;
use App\Libraries\CustomUploadsLib;
use App\Models\CanvasModel_v2;
use App\Models\ClipModel;
use App\Models\MyCanvasModel;
use App\Models\MyImageModel;
use App\Models\TemplateModel;
use App\Models\UserModel;
use CodeIgniter\HTTP\RequestInterface;
use CodeIgniter\HTTP\ResponseInterface;
use Psr\Log\LoggerInterface;

class Canvas extends BaseController
{

    public $page = 0;
    public $per_page = 30;

    public function initController(RequestInterface $request, ResponseInterface $response, LoggerInterface $logger)
    {
        parent::initController($request, $response, $logger); // TODO: Change the autogenerated stub
    }

    public function index() : string
    {

        $user = auth()->getUser();

        $aData = [
                'nCanvasWidth' => 2200
            ,   'nCanvasHeight' => 1556
            ,   'zoom' => 0.7
            ,   'emRotate' => 'L'
            ,   'aInput' => [
                    'type'          => 'new'
                ,   'my_canvas_id'  => ''
                ,   'template_id'   => ''
                ,   'user_id'       => $user->id
            ]
            ,   'per_page'  => $this->per_page
            ,   'act'       => $this->request->getGet('act')
        ];

        if($this->request->getGet('e') != ''){
            // YmdHis_new|template|my_mycanvasid_templateid
            $encrypter          = \Config\Services::encrypter();
            $eEnc               = $this->request->getGet('e');
            $strEnc             = $encrypter->decrypt($eEnc);
            $aEnc               = explode("_",$strEnc);
            $aData['aInput']["type"]            = $aEnc[1];
            $aData['aInput']["my_canvas_id"]    = $aEnc[2] != '0' ? $aEnc[2] : '';
            $aData['aInput']["template_id"]     = $aEnc[3];

            $canvas_model   = new CanvasModel_v2();
            $my_canvas_model = new MyCanvasModel();
            if($aData['aInput']["type"] == 'template'){
                $aData['aInfo'] = $canvas_model->getTemplateInfo(['template_id' => $aData['aInput']["template_id"]]); // 템플릿
            }else{
                save_log('V' , 0 , $aData['aInput']["my_canvas_id"]);
                $aData['aInfo'] = $my_canvas_model->getMyTemplateInfo(['my_canvas_id' => $aData['aInput']["my_canvas_id"]]); // 나의보관함
            }

            $aData['emRotate'] = $aData['aInfo']['rotate'];

        }else{
            $enMyCanvas = new MyCanvas();
            $aData['aInfo'] = $enMyCanvas->getAttributes();
        }

        if($aData['emRotate'] == 'P'){
            $aData['nCanvasWidth'] = 1556;
            $aData['nCanvasHeight'] = 2200;
            $aData['zoom'] = 0.6;
        }else if($aData['emRotate'] == 'S'){
            $aData['nCanvasWidth'] = 2200;
            $aData['nCanvasHeight'] = 2200;
        }

        $view_file = 'canvas/index';
        if(isTest()){
            //$view_file = 'canvas/index_test';
        }

        return view($view_file , $aData);

    }

    public function CheckModified() : ResponseInterface
    {

        $aInput = $this->request->getPost();
        $my_canvas_model = new MyCanvasModel();
        $user_model = new UserModel();

        $aInfo = $my_canvas_model->where('my_canvas_id' , $aInput['my_canvas_id'])->asArray()->first();
        $aUserInfo = $user_model->where('id',auth()->id())->asArray()->first();

        $data = [
                'last_modified' => view_date_format($aInfo['mod_date'] ?: $aInfo['reg_date'])
            ,   'username' => $aUserInfo['username']
            ,   'chk_date' => $aInfo['mod_date'] ?: $aInfo['reg_date']
        ];

        $ret = ['success' => true , 'data' => $data];

        if($data['chk_date'] != $aInput['last_modified']){
            $ret = ['success' => false , 'data' => $data];
        }

        return $this->response->setJSON($ret);

    }

    public function slide() : string
    {
        ini_set('memory_limit', '1024M');

        $aSlideData = json_decode($this->request->getPostGet('aSlideData'),true);
        return view('canvas/slide' , ['aSlideData' => $aSlideData]);
    }


    public function download()
    {
        try{

            ini_set('memory_limit', '1024M');

            $user           = auth()->getUser();
            $user_id        = $user->id;
            $sFilePrefix    = sprintf("%s_%04d",date('YmdHis'),rand(0,9999));
            $tempDir        = WRITEPATH.'tmp/'.$user_id.'_'.rand(0,9999);
            $ret            = @mkdir($tempDir);

            if(!$ret){
                log_message('error' , 'Canvas::download Create folder ERROR');
                throw new \Exception('임시 폴더를 생성 중 문제가 발생하였습니다.');
            }

            $err            = false;
            $aImgData       = json_decode($this->request->getPost('aImgData') , true);


            foreach($aImgData as $sIdx => $sImgData){
                $img = $this->pngtojpgAction($sImgData);
//                $img = str_replace('data:image/png;base64,', '', $sImgData);
                $img = str_replace(' ', '+', $img);
                $data = base64_decode($img);
                $file = sprintf("%s/page_%02d.jpg",$tempDir,$sIdx);
                $success = file_put_contents($file, $data);
                if($success == false) $err = true;
            }

            if($err){
                log_message('error' , 'Canvas::download Create Images ERROR');
                throw new \Exception('이미지 파일을 생성 중 문제가 발생하였습니다.');
            }

            $sCmd = sprintf("cd %s && /usr/bin/zip -r %s.zip * ",$tempDir,$sFilePrefix );
            shell_exec($sCmd); //압축 실행

            $fileFullPath = $tempDir.'/'.$sFilePrefix.'.zip'; //압축파일 전체경로
            header('Content-Description: File Transfer');
            header('Content-Type: application/octet-stream');
            header('Content-Disposition: attachment; filename='.basename($fileFullPath));
            header('Content-Transfer-Encoding: binary');
            header('Expires: 0');
            header('Cache-Control: must-revalidate');
            header('Pragma: public');
            header('Content-Length: ' . filesize($fileFullPath));
            ob_clean();
            flush();

            if (readfile($fileFullPath))
            {
                helper('filesystem');
                delete_files($tempDir);//파일삭제
                @rmdir($tempDir);//폴더 삭제
            }

            save_log('D');

            return true;

        } catch(\Exception $e) {

            top_alert_script($e->getMessage());
            return false;

        }

    }

    public function getSearchContents() : string
    {

        $aInput = [
                'type'          => $this->request->getPost('m')
            ,   'search_text'   => $this->request->getPost('str')
        ];

        $clip_model     = new ClipModel();
        $template_model = new TemplateModel();

        if($aInput['type'] == '_clip'){ //요소

            $aSearch["category"]    = 'clip';
            $aSearch["search_text"] = $aInput['search_text'];
            $aList = $clip_model->getClipList($aSearch , false , 0 , $this->per_page);

        }else if($aInput['type'] == '_bg'){ //배경

            $aSearch["category"] = 'bg';
            $aSearch["search_text"] = $aInput['search_text'];
            $aList = $clip_model->getClipList($aSearch, false , 0 , $this->per_page);

        }else if($aInput['type'] == '_template'){ //템플릿 검색

            $aSearch["search_text"] = $aInput['search_text'];
            $aList = $template_model->getTemplateList($aSearch, false , 0 , $this->per_page);

        }

        return json_encode(['success' => true , 'msg' => '' , 'data' => $aList]);

    }


    //--------------------------- ajax call

    public function getContentsWrapPage() : string
    {

        $aInput = [ 'file' => $this->request->getPost('type') ];
        $aSearch = ['view_type' => 'canvas'];

        $canvas_model = new CanvasModel_v2();

        if($aInput['file'] == '_template'){ //템플릿

            $aSearch["search_text"] = $this->request->getPost('strKeyword');

            $aSearch["category"] = 'template';
            $aGroup = $canvas_model->getGroupList($aSearch , false , 0 , 20);

            foreach ($aGroup as $k => $r) {
                $aSearch['group_id'] = $r['group_id'];
                $aSearch['view_type'] = 'canvas';
                $aList = $canvas_model->getTemplateGroupList($aSearch , false , 0 , 5);
                $aGroup[$k]['templates'] = $aList;
            }

            $aInput['aList'] = $aGroup;

        }else if($aInput['file'] == '_text'){ //텍스트

            $aInput['aFontSize'] = [14,16,18,20,22,24,28,36,48,60,72,96,120,144,192,208,240,288];

        }else if($aInput['file'] == '_upload'){ //업로드 파일

            $user = auth()->getUser();
            $aSearch['user_id'] = $user->id;
            $aInput['aMyImg']   = $canvas_model->getMyImgList($aSearch);

            if(isTest()){
                //$aInput['file'] = '_upload_t';
            }

        }else if($aInput['file'] == '_clip'){ //요소

            $aSearch["category"] = 'clip';
            $aGroup = $canvas_model->getGroupList($aSearch , false , 0 , 20);
            foreach ($aGroup as $k => $r) {
                $aSearch['group_id'] = $r['group_id'];
                $aList = $canvas_model->getClipGroupList($aSearch , false , 0 , 5);
                $aGroup[$k]['clips'] = $aList;
            }

            $aInput['aList'] = $aGroup;

        }else if($aInput['file'] == '_bg'){ //배경

            $aSearch["category"] = 'bg';
            $aGroup = $canvas_model->getGroupList($aSearch , false , 0 , 20);

            foreach ($aGroup as $k => $r) {
                $aSearch['group_id'] = $r['group_id'];
                $aList = $canvas_model->getClipGroupList($aSearch , false , 0 , 5);
                $aGroup[$k]['clips'] = $aList;
            }

            $aInput['aList'] = $aGroup;

        }

        return view('canvas/_parts/'.$aInput['file'] , $aInput);
    }

    public function getCvsData() : string
    {

        try {

            {//validation
                $rules = [
                        'loadType' => 'required|in_list[template,my]'
                    ,   'nLoadIdx' => 'required|numeric'
                ];

                if (!$this->validate($rules)) {
                    throw new \Exception('필수 입력정보가 누락되었습니다.', 500);
                }

            }

            $aInput = [
                    'loadType'  => $this->request->getPost('loadType')
                ,   'nLoadIdx'  => $this->request->getPost('nLoadIdx')
            ];

            //loadType >  template / my template 2개로 분기처리
            if ($aInput['loadType'] == 'template') {

                $canvas_model = new CanvasModel_v2();

                $aTemplate = $canvas_model->getTemplateInfo(['template_id' => $aInput["nLoadIdx"]]);
                $sOriData = $aTemplate["blob_data"];
                $emRotate = $aTemplate['rotate'] ?? 'L';

                $aBlob = '';
                $retBlob = '';

                if ($sOriData) {
                    $aBlob = json_decode($sOriData);
                    $retBlob = implode("||", $aBlob);
                }
                $RetVal['success'] = true;
                $RetVal['blob'] = $retBlob;
                $RetVal['emRotate'] = $emRotate;
                $RetVal['csrf'] = csrf_hash();

                //onHit
                $canvas_model->onHit($aInput["nLoadIdx"]);

                $RetVal['reject'] = 'Y';
                if( ( $aTemplate['paid_yn'] == 'Y' && session('isPay') ) || $aTemplate['paid_yn'] == 'N' ){
                    $RetVal['reject'] = 'N';
                }

            }else if ($aInput['loadType'] == 'my') {

                $my_canvas_model = new MyCanvasModel();
                $aMyTemplate = $my_canvas_model->getMyTemplateInfo(['my_canvas_id' => $aInput["nLoadIdx"] , 'user_id' => auth()->id()]);

                if(empty($aMyTemplate)){
                    throw new \Exception('불러올 템플릿 정보가 없습니다.',500);
                }

                $sOriData = $aMyTemplate["blob_data"];
                $emRotate = $aMyTemplate['rotate'] ?? 'L';

                $aBlob = '';
                $retBlob = '';

                if ($sOriData) {
                    $aBlob = json_decode($sOriData);
                    $retBlob = implode("||", $aBlob);
                }
                $RetVal['success'] = true;
                $RetVal['blob'] = $retBlob;
                $RetVal['emRotate'] = $emRotate;
                $RetVal['csrf'] = csrf_hash();
                $RetVal['reject'] = 'N';//본인 데이터는 사용가능


            }else{
                throw new \Exception('필수 입력정보가 누락되었습니다.',500);
            }

        } catch ( \Exception $e){
            echo json_encode(['success' => false , 'msg' => $e->getMessage(), 'csrf' => csrf_hash()]);
            return false;
        }
        //template
//        if($aInput["nLoadIdx"] > 0){
//
//        }else{
//            $RetVal['success'] = true;
//            $RetVal['blob'] = '';
//            $RetVal['emRotate'] = '';
//            $RetVal['csrf'] = csrf_hash();
//
//        }

        return json_encode($RetVal);

    }

    public function getLoadAjax() : bool
    {

        $aInput = [
                'type'  => $this->request->getPost('type')
            ,   'page'  => $this->request->getPost('page')
            ,   'act'   =>  $this->request->getPost('act')
            ,   'search_text' => $this->request->getPost('search_text')
        ];

        $set_page           = $this->request->getPostGet('page') ?? $this->page;
        $set_per_page       = $this->request->getPostGet('per_page') ?? $this->per_page;
        $s_limit            = max(($set_page - 1) * $set_per_page, 0);

        $canvas_model       = new CanvasModel_v2();

        if($aInput['act'] == 'category') {

            $aSearch["view_type"] = 'canvas';

            if ($aInput['type'] == '_template') { //템플릿

                $aSearch["search_text"] = $this->request->getPost('search_text');
                $aSearch["category"]    = 'template';

                $aGroup = $canvas_model->getGroupList($aSearch, false , $s_limit , $set_per_page);

                foreach ($aGroup as $k => $r) {
                    $aSearch['group_id'] = $r['group_id'];
                    $aList = $canvas_model->getTemplateGroupList($aSearch, false , 0 , 5);
                    $aGroup[$k]['templates'] = $aList;
                }

                $aInput['aList'] = $aGroup;

            } else if ($aInput['type'] == '_upload') { //업로드 파일

                $myimg_model = new MyImageModel();
                $aSearch['user_id'] = auth()->id();
                $aInput['aList'] = $myimg_model->getMyImageList($aSearch , false , $s_limit , $set_per_page);

            } else if ($aInput['type'] == '_clip') { //요소

                $aSearch["category"] = 'clip';
                $aGroup = $canvas_model->getGroupList($aSearch, false , $s_limit , $set_per_page);

                foreach ($aGroup as $k => $r) {
                    $aSearch['group_id'] = $r['group_id'];
                    $aList = $canvas_model->getClipGroupList($aSearch, false , 0 , 5);
                    $aGroup[$k]['clips'] = $aList;
                }

                $aInput['aList'] = $aGroup;

            } else if ($aInput['type'] == '_bg') { //배경

                $aSearch["category"] = 'bg';
                $aGroup = $canvas_model->getGroupList($aSearch, false , $s_limit , $set_per_page);

                foreach ($aGroup as $k => $r) {
                    $aSearch['group_id'] = $r['group_id'];
                    $aList = $canvas_model->getClipGroupList($aSearch, false, 0, 5);
                    $aGroup[$k]['clips'] = $aList;
                }

                $aInput['aList'] = $aGroup;

            }

        } else if($aInput['act'] == 'search') {

            $clip_model = new ClipModel();
            $template_model = new TemplateModel();
            $aList = [];
            
            if($aInput['type'] == '_clip'){ //요소

                $aSearch["category"]    = 'clip';
                $aSearch["search_text"] = $aInput['search_text'];
                $aList = $clip_model->getClipList($aSearch , false , $s_limit , $set_per_page);

            }else if($aInput['type'] == '_bg'){ //배경

                $aSearch["category"] = 'bg';
                $aSearch["search_text"] = $aInput['search_text'];
                $aList = $clip_model->getClipList($aSearch , false , $s_limit , $set_per_page);

            }else if($aInput['type'] == '_template'){ //템플릿 검색

                $aSearch["search_text"] = $aInput['search_text'];
                $aList = $template_model->getTemplateList($aSearch , false , $s_limit , $set_per_page);

            }

            $aInput['aList'] = $aList;

        }else{
            $aInput['aList'] = [];
        }

        echo json_encode(['success' => true , 'msg' => '' , 'data' => $aInput]);

        return true;

    }


    public function upsert() : bool
    {

        ini_set('memory_limit', '1024M');

        $isUpdate       = false; //insert | update
        $upsertTitle    = '템플릿 등록';

        {//validation
            $rules = [
                    'save_type' => 'required|in_list[new,template,my]'
                ,   'title'     => 'required'
                ,   'page'      => 'required|numeric'
                ,   'rotate'    => 'required|in_list[S,P,L]'
            ];

            if($this->request->getPost('save_type') == 'my') { //update

                $rules['my_canvas_id'] = 'required|numeric';

                $isUpdate       = true; //insert | update
                $upsertTitle    = '템플릿 수정';

            }

            if (! $this->validate($rules))
            {
                echo json_encode(['success' => false , 'msg' => '필수 입력정보가 누락되었습니다.', 'csrf' => csrf_hash()]);
                return false;
            }

        }

        try{//data set

            $enMyCanvas = new MyCanvas();
            $my_canvas_model = new MyCanvasModel();
            $aInput     = $enMyCanvas->getAttributes(); //set default data
            $user       = auth()->getUser();

            $aInput['title'] = $this->request->getPost('title');

            //CORS 로 인한 도메인제거
            $base_url            = rtrim(base_url(),'/');
            $blob_data           = str_replace($base_url,'',$this->request->getPostGet('blob_data'));
            $aInput['blob_data'] = $blob_data;
            $aInput['page'] = $this->request->getPost('page');
            $aInput['rotate'] = $this->request->getPost('rotate');

            $datetime       = date('YmdHis');

            if($isUpdate){

                $_id                = $this->request->getPost('my_canvas_id');

                save_log('S' , 0 , $_id);

                $aInput['mod_date'] = $datetime;
                $aInput['mod_id']   = $user->id;
                $aInput['mod_ip']   = $this->request->getIPAddress();

                unset($aInput['user_id']);
                unset($aInput['thumb_file']);
                unset($aInput['reg_date']);
                unset($aInput['reg_ip']);
                unset($aInput['reg_id']);

            }else{
                save_log('S');
                $aInput['user_id'] = $user->id;
                $aInput['reg_date'] = $datetime;
                $aInput['reg_ip'] = $this->request->getIPAddress();
                $aInput['reg_id'] = $user->id;

            }

            { // create thumbnail / data to file

                $sFilePrefix = getRandomFileName('.png');
                $tmpPath = '/tmp';
                $basePath = DOCROOT . '/file/design_canvas/template/' . date('Y/m/d');
                $tmpfull_filePath = $tmpPath . '/' . $sFilePrefix;
                $aImgData = json_decode($this->request->getPost('thumb_file'));
                $img = $aImgData[0];
                $img = str_replace('data:image/png;base64,', '', $img);
                $img = str_replace(' ', '+', $img);
                $data = base64_decode($img);
                $success = file_put_contents($tmpfull_filePath, $data);

                if(!$success){
                    throw new \Exception("이미지 썸네일 생성중 문제가 발생하였습니다.", 500);
                }

                $aImgInput = [
                        'act'       => 'change'
                    ,   'path'      => $tmpfull_filePath
                    ,   'file_name' => $sFilePrefix
                    ,   'type'      => 'template'
                    ,   'h'         => 300
                ];

                $oImage     = new CustomImageLib(); //이미지 변환 library
                $aResizeImg = $oImage->resize_h($aImgInput);

                if($aResizeImg['success'] == false){
                    throw new \Exception("이미지 리사이징 중 문제가 발생했습니다.", 500);
                }

                $aInput['thumb_file'] = $aResizeImg['data'];

            }

            if($isUpdate) $bRet = $my_canvas_model->update($_id,$aInput); //수정
            else {
                $bRet = $my_canvas_model->insert($aInput); //등록
                $_id = $my_canvas_model->db->insertID();
            }

            if($bRet) echo json_encode(['success' => true , 'msg' => "{$upsertTitle} 성공" , 'datetime' => $datetime ,'id' => $_id, 'csrf' => csrf_hash() ]);
            else throw new \Exception("{$upsertTitle} 실패.\n잠시 후 다시 시도해주세요.", 500);

        } catch (\Exception $e){

            echo json_encode(['success' => false , 'msg' => $e->getMessage() ,  'csrf' => csrf_hash()]);
            return false;

        }

        return true;

    }
    public function userUpload() : bool
    {

        {//validation
            $rules = [ 'upImgFile' => 'uploaded[upImgFile]|mime_in[upImgFile,image/jpeg,image/jpg,image/png,image/gif]' ];
            if (! $this->validate($rules))
            {
                echo json_encode(['success' => false , 'msg' => '' , 'error_msg' => $this->validator->getErrors(), 'csrf' => csrf_hash()]);
                return false;
            }
        }

        { //data set

            $eMyImgEn           = new MyImg(); //entity
            $aInput             = $eMyImgEn->getAttributes(); //set default data
            $user               = auth()->getUser();

            $aInput['user_id']  = $user->id;

        }

        {//file upload

            $oUpload    = new CustomUploadsLib(); //업로드 관련 library

            if($this->request->getFile('upImgFile'))
            {//텍스트 이미지 파일

                $aImg = $oUpload->run(['type' => 'my_img' , 'file_field' => 'upImgFile']);

                if(!$aImg['success']) {
                    echo json_encode(['success' => false , 'msg' => "이미지[upImgFile] 등록 중 문제가 발생했습니다.\n메시지 : ".$aImg['msg'] , 'csrf' => csrf_hash() ]);
                    return false;
                }

                $aInput['image_file']   = $aImg['data']['path'];
                $aImgSize               = getimagesize(DOCROOT.$aImg['data']['path']);
                $aInput['w']            = $aImgSize[0];
                $aInput['h']            = $aImgSize[1];

            }

        }

        $canvas_model   = new CanvasModel_v2();
        $bRet           = $canvas_model->uploadUserImage($aInput);

        $aInput['myimg_id'] = $canvas_model->db->insertID();

        if($bRet) echo json_encode(['success' => true , 'msg' => '' , 'data' => $aInput ]);
        else echo json_encode(['success' => true , 'msg' => '업로드 중 문제가 발생하였습니다.' , 'data' => '' , 'csrf' => csrf_hash() ]);

        return $bRet;
    }
    public function userUploadDelete() : ResponseInterface
    {

        $aInput = [
                'myimg_id'  => $this->request->getPost('myImg_id')
            ,   'user_id'   => auth()->id()
        ];

        $myimg_model = new MyImageModel();
        $aInfo = $myimg_model->getMyImageInfo($aInput);

        $ret = ['success' => false , 'msg' => '삭제가 가능한 업로드파일이 없습니다.'];
        if($aInfo){
            $resp = $myimg_model->delete($aInput['myimg_id']);

            if($resp) $ret = ['success' => true , 'msg' => '업로드 파일을 삭제하였습니다.'];
            else $ret = ['success' => false , 'msg' => '업로드 파일을 삭제하던 중 문제가 발생하였습니다.'];
        }

        return $this->response->setJSON($ret);

    }

    private function pngtojpgAction($img_data)
    {
        //초기화
        ob_clean();
        flush();

        //Code to convert png to jpg image
        $input = imagecreatefrompng($img_data);
        $width = imagesx($input);
        $height = imagesy($input);
        $output = imagecreatetruecolor($width, $height);
        $white = imagecolorallocate($output, 255, 255, 255);
        imagefilledrectangle($output, 0, 0, $width, $height, $white);
        imagecopy($output, $input, 0, 0, 0, 0, $width, $height);

        imagejpeg($output);
        $contents = ob_get_contents();
        //Converting Image DPI to 300DPI
        $contents = substr_replace($contents, pack("cnn", 1, 300, 300), 13, 5);


        return base64_encode($contents);
        //return 'data:image/jpeg;base64,'.base64_encode($contents);

    }

}