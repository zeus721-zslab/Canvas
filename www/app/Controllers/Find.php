<?php
namespace App\Controllers;

use App\Libraries\SMS;
use App\Models\UserModel;
use CodeIgniter\HTTP\RequestInterface;
use CodeIgniter\HTTP\ResponseInterface;
use CodeIgniter\Shield\Entities\User;
use Psr\Log\LoggerInterface;

class Find extends BaseController
{

    public function initController(RequestInterface $request, ResponseInterface $response, LoggerInterface $logger)
    {
        parent::initController($request, $response, $logger); // TODO: Change the autogenerated stub
    }

    public function id()
    {

        if(auth()->loggedIn()){
            return redirect()->route('Main::index');
        }

        $this->_header(true);
        echo view('find/id');
        $this->_footer(true);

    }

    public function pw()
    {
        if(auth()->loggedIn()){
            return redirect()->route('Main::index');
        }

        $this->_header(true);
        echo view('find/pw');
        $this->_footer(true);

    }


    public function getUser($type = ''): ResponseInterface
    {

        $aInput['cell_tel'] = format_phone($this->request->getPost('cell_tel'));

        if($type == 'pw'){ //비밀번호 찾기
            $aInput['login_id'] = $this->request->getPost('login_id');
        }else{ //아이디 찾기
            $aInput['username'] = $this->request->getPost('user_name');
        }

        try {

            $user_model = new UserModel();
            $aUserInfo = $user_model->where($aInput)->asArray()->first();
            if(empty($aUserInfo)){
                throw new \Exception('등록된 회원정보가 없습니다.');
            }

            $cert_num = sprintf('%04d',rand(1,9999));

            $builder = db_connect();
            $ret = $builder->table('tb_cert_num')->insert([
                    'login_id' => $aUserInfo['login_id']
                ,   'type'      => $type
                ,   'user_name' => $aUserInfo['username']
                ,   'cell_tel' => $this->request->getPost('cell_tel')
                ,   'cert_num' => $cert_num
                ,   'reg_date' => date('YmdHis')
            ]);

            if(!$ret){
                throw new \Exception('SMS인증 데이터를 기록하는데 문제가 발생하였습니다. 다시시도해주세요.');
            }

            $send_data = [
                    'send_date' => date('YmdHis')
                ,   'DEST_INFO' => $aUserInfo['username'].'^'.onlynumber($aUserInfo['cell_tel'])
                ,   'msg'       => "[킨더캔버스] 인증번호는 {$cert_num} 입니다."
            ];

            $sms_lib = new SMS();
            $ret = $sms_lib->sendSMS($send_data);

            if(empty($ret)){
                throw new \Exception('SMS발송 중 문제가 발생하였습니다. 다시시도해주세요.');
            }

        }catch (\Exception $e){
            return $this->response->setJSON(['success' => false , 'msg' => $e->getMessage(), 'csrf' => csrf_hash() ]);
        }

        return $this->response->setJSON(['success' => true , 'msg' => '메시지가 발송되었습니다.' , 'csrf' => csrf_hash()]);

    }

    public function process($type) : ResponseInterface
    {

        $aInput = [
                'cell_tel'  => $this->request->getPost('cell_tel')
            ,   'cert_num'  => $this->request->getPost('cert_num')
            ,   'use_yn'    => 'N'
            ,   'type'      => $type
        ];

        if($type == 'pw') $aInput['login_id'] = $this->request->getPost('login_id'); //비밀번호 찾기
        else $aInput['user_name'] = $this->request->getPost('user_name'); //아이디 찾기

        try{

            $builder = db_connect();
            $data = $builder->table('tb_cert_num')->getWhere($aInput)->getRowArray();

            if(!$data){
                throw new \Exception('인증정보 또는 회원정보가 없습니다.');
            }

            $user_model = new UserModel();
            $aUserInfo = $user_model->where('login_id',$data['login_id'])->asArray()->first();

            if($type == 'pw'){

                if($aUserInfo['sns_site'] == 0){

                    //비밀번호 변경
                    $new_pw = sprintf('%04d',rand(1,9999));
                    $user = new User();
                    $user->fill(['password' => $new_pw , 'updated_at' => date('Y-m-d H:i:s') , 'updated_ip' => $this->request->getIPAddress() , 'id' => $aUserInfo['id']]);
                    $user_model->save($user);

                    //변경된 비밀번호 sms발송
                    $send_data = [
                            'send_date' => date('YmdHis')
                        ,   'DEST_INFO' => $aUserInfo['username'].'^'.onlynumber($aUserInfo['cell_tel'])
                        ,   'msg'       => "[킨더캔버스] 초기화 비밀번호는 {$new_pw} 입니다."
                    ];
                    $sms_lib = new SMS();
                    $sms_lib->sendSMS($send_data);

                    $ret = ['success' => true , 'success_msg' => '비밀번호 초기화 후 메시지를 발송했습니다.'];

                }else{ //sns > 아이디확인 불가하여 예외처리

                    throw new \Exception('인증정보 또는 회원정보가 없습니다.');

                }

            }else{

                $ret = ['success' => true , 'login_id' => $aUserInfo['login_id'] , 'sns_site' => $aUserInfo['sns_site'] , 'email' => $aUserInfo['user_email']];

            }

            //인증번호 사용완료
            $builder->table('tb_cert_num')->set('use_yn', 'Y')->where('cert_id',$data['cert_id'])->update();

            return $this->response->setJSON($ret);

        }catch (\Exception $e){

            return $this->response->setJSON(['success' => false , 'msg' => '' , 'error_msg' => [$e->getMessage()]]);

        }

    }

}
