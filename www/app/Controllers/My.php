<?php
namespace App\Controllers;

use App\Entities\MyCanvas;
use App\Entities\Order;
use App\Models\ActionLogModel;
use App\Models\MyCanvasModel;
use App\Models\OrderModel;
use App\Models\UserModel;
use CodeIgniter\HTTP\RedirectResponse;
use CodeIgniter\HTTP\RequestInterface;
use CodeIgniter\HTTP\ResponseInterface;
use CodeIgniter\Shield\Entities\User;
use CodeIgniter\Validation\Exceptions\ValidationException;
use Dompdf\Dompdf;
use Dompdf\Options;
use Psr\Log\LoggerInterface;

class My extends BaseController
{

    public function initController(RequestInterface $request, ResponseInterface $response, LoggerInterface $logger)
    {
        parent::initController($request, $response, $logger); // TODO: Change the autogenerated stub
    }

    public function index($type = '')
    {

        if($type == '') $type = 'myBox';
        if( method_exists($this, $type) == false ) $this->show404();
        $this->{$type}();

    }

    public function myBox()
    {

        $encrypter          = \Config\Services::encrypter();
        $user               = auth()->getUser();
        $my_canvas_model    = new MyCanvasModel();
        $aList = $my_canvas_model->getMyTemplateList(['user_id' => $user->id]);

        $aInput = [
                'aList' => $aList
            ,   'encrypter' => $encrypter
        ];

        $this->_header();
        echo view('my/index' , $aInput);
        $this->_footer();

    }

    public function info()
    {

        $user = auth()->getUser();
        if( $user->sns_site > 0 ){//sns login 대상자
             $this->upsertForm(true);
             return true;
        }

        $ext = $this->common_top();

        $this->_header();
        echo view('my/info' , ['ext' => $ext]);
        $this->_footer();

    }

    public function history()
    {

        $order_model = new OrderModel();
        $action_log_model = new ActionLogModel();

        $aInput = ['user_id' => auth()->id()];

        $aOrderLists = $order_model->getOrderList($aInput);

        foreach ($aOrderLists as $k => $r) {

            $aOrderLists[$k]['able_cancel'] = 'N';
            $refInput = [
                    'user_id' => $r['user_id']
                ,   'e_date' => $r['e_use_date']
                ,   's_date' => $r['s_use_date']
            ];
            $action_log = $action_log_model->refOrderCancelData($refInput);
            if($action_log){
                $aOrderLists[$k]['able_cancel'] = $action_log['clip_cnt']+$action_log['template_cnt']+$action_log['mycvs_cnt'] > 0 ? 'N' : 'Y';//사용내역이 있다면 취소 불가
            }

            $aOrderLists[$k]['able_cancel2'] = 'Y';
            if($r['pay_date']){
                $use_date = abs(getDDay(substr(onlynumber($r['pay_date']),0,8)));
                if($use_date >= 7) $aOrderLists[$k]['able_cancel2'] = 'N'; //결제일 7일 이후라면 취소 불가
            }
            $aOrderLists[$k] = array_merge($aOrderLists[$k] , $action_log);

        }


        $ext = $this->common_top();

        $this->_header();
        echo view('my/history' , ['ext' => $ext , 'aOrderLists' => $aOrderLists]);
        $this->_footer();

    }

    public function receipt()
    {

        $aInput = [
                'idx'           => $this->request->getGet('oid')
            ,   'receipt_name'  => $this->request->getGet('receipt_name')
        ];

        $order_model = new OrderModel();
        $aOrderInfo = $order_model->asArray()->find($aInput['idx']);
        $aOrderInfo['supply_amount'] = getSupplyAmount($aOrderInfo['amount']);//공급가액
        $aOrderInfo['vat_amount'] = getVatAmount($aOrderInfo['supply_amount']);//부가세액

        $view = \Config\Services::renderer();
        $view->setData(['aOrderInfo' => $aOrderInfo , 'receipt_name' => $aInput['receipt_name'] ]);
        $html = $view->render('my/receipt');

        try{

            $options = new Options();
            $options->setChroot(DOCROOT . '/fonts');
            $options->setChroot(DOCROOT . '/img');
            $options->setFontDir(DOCROOT . '/fonts');
            $options->setTempDir(DOCROOT . '/fonts');
            $options->setFontCache(DOCROOT . '/fonts');
            $options->set('defaultFont', 'NanumGothic');
            $options->set('isPhpEnabled', true);
            $options->set('isRemoteEnabled',true);

            $dompdf = new Dompdf($options);
            // Load HTML content
            $dompdf->loadHtml($html , mb_detect_encoding($html));
            // (Optional) Setup the paper size and orientation
            $dompdf->setPaper('A4', 'landscape');
            // Render the HTML as PDF
            $dompdf->render();
            // Output the generated PDF to Browser
            $dompdf->stream('거래명세서_'.date('YmdHis').'.pdf' );

        } catch (\ErrorException $e){
            top_alert_script("거래명세서를 불러오던 중 문제가 발생하였습니다.\\n[메시지] ".$e->getMessage());
        }


    }

    public function upsertForm($isPass = true)
    {

        if($isPass == false){
            $encrypt_data = session('encrypt_data');
            if(!$encrypt_data){
                alert_back_script('');
                return false;
            }
        }

        $model = new UserModel();
        $oUserInfo = $model->setTable('tb_user')->where('id' , auth()->id())->first();

        $this->_header();
        echo view('my/upsert_form' , ['oUserInfo' => $oUserInfo]);
        $this->_footer();

        return true;

    }

    public function withdraw() : RedirectResponse
    {

        if(auth()->loggedIn()){

            $user      = auth()->getProvider();
            $aUserInfo = $user->find(auth()->id());

            //이용기간 초기화
            $aUserInfo->fill(['s_use_date' => '' , 'e_use_date' => '']);
            $user->save($aUserInfo);

            $user->delete(auth()->id());
            auth()->logout();

            return redirect()->to('/')->with('error' , '그 동안 '.config('App')->site_name.' 이용해주셔서 감사합니다.');

        }else{

            return redirect()->to('/')->with('error' , '잘못된 접근입니다.');

        }

    }

    public function reqOrderCancel() : ResponseInterface
    {

        $aInput = ['order_id' => $this->request->getPost('order_id')];

        try {

            $order_model = new OrderModel();
            $enOrder     = new Order();
            $aOrderInfo = $order_model->asArray()->where($aInput)->first();

            if(empty($aOrderInfo)){
                throw new \Exception('주문정보가 없습니다.');
            }

            if(in_array($aOrderInfo['pay_flag'] , ['R','C'])){ // `사전주문 정보` 또는 `취소 주문` 인 경우
                throw new \Exception('해당 주문은 취소가 불가능합니다.');
            }

            $aOrderInfo['req_cancel'] = 'Y';
            $aOrderInfo['req_cancel_date'] = date('YmdHis');

            $enOrder->fill($aOrderInfo);
            $ret = $order_model->save($enOrder);

            if(!$ret){
                throw new \Exception('주문 취소요청 처리 중 문제가 발생하였습니다.');
            }

            $ret = ['success' => true , 'msg' => '취소 요청이 완료 되었습니다.' , 'csrf' => csrf_hash() ];

        } catch ( \Exception $e){

            $ret = ['success' => false , 'msg' => $e->getMessage() , 'csrf' => csrf_hash() ];

        }

        return $this->response->setJSON($ret);

    }

    public function modify(): ResponseInterface
    {

//        log_message('error' , 'My::modify formdata > '. json_encode($this->request->getPost() , JSON_UNESCAPED_UNICODE) );

        $rules = setting('Validation.user_modify');

        if($this->request->getPost('password')){ //입력된 비밀번호가 있는 경우에만
            $rules['password'] = [ 'label' => 'Auth.password', 'rules' => 'required|max_byte[72]|strong_password[]', 'errors' => [ 'max_byte' => 'Auth.errorPasswordTooLongBytes' ] ];
            $rules['password_confirm'] = [ 'label' => 'Auth.passwordConfirm', 'rules' => 'required|matches[password]'];
        }

        if (! $this->validateData($this->request->getPost(), $rules, [], config('Auth')->DBGroup)) {
            $ret = ['success' => false , 'msg' => '' , 'error_msg' => $this->validator->getErrors() , 'csrf' => csrf_hash()];
            return $this->response->setJSON($ret);
        }

        $user_model             = new UserModel();
        $aUserInfo              = $user_model->where('id',auth()->id())->asArray()->first();

        // Save the user
        $allowedPostFields      = array_keys($rules);

        $aInput                 = $this->request->getPost($allowedPostFields);
//        $aInput['sms_yn']       = $this->request->getPost('sms_yn') ? 'Y' : 'N';
//        $aInput['email_yn']     = $this->request->getPost('email_yn') ? 'Y' : 'N';
        $aInput['advert_yn']    = $this->request->getPost('advert_yn') ? 'Y' : 'N';
        $aInput['id']           = auth()->id();

        {//check overlap email
            $oUserInfo = $user_model->setTable('tb_user')->where('user_email', $aInput['user_email'])->where('id !=', auth()->id())->first();
            if ($oUserInfo) {
                return $this->response->setJSON(['success' => false, 'msg' => '같은 이메일이 존재합니다.', '_csrf' => csrf_hash()]);
            }
        }

        if( $aUserInfo['advert_yn'] == 'N' && $aInput['advert_yn'] == 'Y'){
            $aInput['advert_date']    = date('YmdHis');
        }

        if($aInput['advert_yn'] == 'N'){
            $aInput['advert_date'] = '';
        }

//        log_message('error' , 'My::modify upsertdata > '. json_encode($aInput , JSON_UNESCAPED_UNICODE) );

        $user                   = new User();
        $user->fill($aInput);

        try {
            $user_model->save($user);
        } catch (ValidationException $e) {
            $ret = ['success' => false , 'msg' => $user_model->errors() , 'error_msg' => '' , 'csrf' => csrf_hash()];
            return $this->response->setJSON($ret);
        }

        $ret = ['success' => true , 'msg' => '수정이 완료되었습니다.' , 'error_msg' => '' , 'csrf' => csrf_hash()];
        return $this->response->setJSON($ret);
        
    }

    public function action($id , $type) : mixed
    {
        $ret = ['success' => true , 'msg' => '' , 'csrf' => csrf_hash()];


        if($id == '' || $type == ''){
            $ret = ['success' => false , 'msg' => '필수 입력정보가 누락되었습니다.' , 'csrf' => csrf_hash()];
            return $this->response->setJSON($ret);
        }

        $my_canvas_model    = new MyCanvasModel();
        $aInfo = $my_canvas_model->where('my_canvas_id' , $id)->first();

        if(empty($aInfo)){
            $ret = ['success' => false , 'msg' => '나의 보관함 정보가 없습니다.' , 'csrf' => csrf_hash()];
            return $this->response->setJSON($ret);
        }

        if($type == 'copy'){ //복사

            $aInput = [
                    'user_id'       => $aInfo->user_id
                ,   'title'         => $aInfo->title . ' - 복사'
                ,   'thumb_file'    => $aInfo->thumb_file
                ,   'blob_data'     => $aInfo->blob_data
                ,   'page'          => $aInfo->page
                ,   'share_flag'    => 'N'
                ,   'rotate'        => $aInfo->rotate
                ,   'reg_date'      => date('YmdHis')
                ,   'reg_ip'        => $this->request->getIPAddress()
                ,   'reg_id'        => $aInfo->reg_id
            ];

            $enMyCanavs = new MyCanvas();
            $enMyCanavs->fill($aInput);

            $bRet = $my_canvas_model->save($enMyCanavs);
            $ret = ['success' => $bRet , 'msg' => $bRet ? '복사가 완료되었습니다.' : "복사를 하던 중 문제가 발생하였습니다.\n잠시 후 다시시도해주세요" , 'csrf' => csrf_hash()];

        }else if($type == 'down') { //다운로드

            $ret = ['success' => true , 'msg' => '', 'csrf' => csrf_hash() , 'data' => $aInfo];


        }else if($type == 'del') { //삭제

            $bRet = $my_canvas_model->delete($id);
            $ret = ['success' => $bRet , 'msg' => $bRet ? '삭제가 완료되었습니다.' : "삭제를 하던 중 문제가 발생하였습니다.\n잠시 후 다시시도해주세요" , 'csrf' => csrf_hash()];

        }else if($type == 'change_title') { //제목변경

            $aInput = [
                    'my_canvas_id'  => $id
                ,   'title'         => $this->request->getPost('title')
                ,   'mod_date'      => date('YmdHis')
                ,   'mod_ip'        => $this->request->getIPAddress()
                ,   'mod_id'        => auth()->id()
            ];
            $enMyCanavs = new MyCanvas();
            $enMyCanavs->fill($aInput);

            $bRet = $my_canvas_model->save($enMyCanavs);
            $ret = ['success' => $bRet , 'msg' => $bRet ? '' : "제목수정를 하던 중 문제가 발생하였습니다.\n잠시 후 다시시도해주세요" , 'csrf' => csrf_hash()];
        }

        return $this->response->setJSON($ret);

    }

    public function download()
    {
        try{
            ini_set('memory_limit', '1024M');

            $user           = auth()->getUser();
            $user_id        = $user->id;
            $sFilePrefix    = sprintf("%s_%04d",date('YmdHis'),rand(0,9999));
            $tempDir        = WRITEPATH.'tmp/'.$user_id.'_'.rand(0,9999);
            $ret            = @mkdir($tempDir);

            if(!$ret){
                log_message('error' , 'Canvas::download Create folder ERROR');
                throw new \Exception('임시 폴더를 생성 중 문제가 발생하였습니다.');
            }

            $err            = false;
            $aImgData       = json_decode($_POST["aImgData"] , true);


            foreach($aImgData as $sIdx => $sImgData){
                $img = $this->pngtojpgAction($sImgData);
//                $img = str_replace('data:image/png;base64,', '', $sImgData);
                $img = str_replace(' ', '+', $img);
                $data = base64_decode($img);
                $file = sprintf("%s/page_%02d.jpg",$tempDir,$sIdx);
                $success = file_put_contents($file, $data);
                if($success == false) $err = true;
            }

            if($err){
                log_message('error' , 'Canvas::download Create Images ERROR');
                throw new \Exception('이미지 파일을 생성 중 문제가 발생하였습니다.');
            }

            $sCmd = sprintf("cd %s && /usr/bin/zip -r %s.zip * ",$tempDir,$sFilePrefix );
            shell_exec($sCmd); //압축 실행

            $fileFullPath = $tempDir.'/'.$sFilePrefix.'.zip'; //압축파일 전체경로
            header('Content-Description: File Transfer');
            header('Content-Type: application/octet-stream');
            header('Content-Disposition: attachment; filename='.basename($fileFullPath));
            header('Content-Transfer-Encoding: binary');
            header('Expires: 0');
            header('Cache-Control: must-revalidate');
            header('Pragma: public');
            header('Content-Length: ' . filesize($fileFullPath));
            ob_clean();
            flush();

            if (readfile($fileFullPath))
            {
                helper('filesystem');
                delete_files($tempDir);//파일삭제
                @rmdir($tempDir);//폴더 삭제
            }

            return true;

        } catch(\Exception $e) {

            top_alert_script($e->getMessage());
            return false;

        }

    }

    private function pngtojpgAction($img_data)
    {
        ob_clean();
        flush();

        //Code to convert png to jpg image
        $input = imagecreatefrompng($img_data);
        $width = imagesx($input);
        $height = imagesy($input);
        $output = imagecreatetruecolor($width, $height);
        $white = imagecolorallocate($output, 255, 255, 255);
        imagefilledrectangle($output, 0, 0, $width, $height, $white);
        imagecopy($output, $input, 0, 0, 0, 0, $width, $height);

        imagejpeg($output);
        $contents = ob_get_contents();
        $contents = substr_replace($contents, pack("cnn", 1, 300, 300), 13, 5);

        return base64_encode($contents);

    }

    public function check_email(): ResponseInterface
    {


        $user_model = new UserModel();

        $email = $this->request->getPost('email');

        if( $email == '' ){
            $ret = ['success' => false , 'msg' => '필수입력정보가 없습니다.' , '_csrf' => csrf_hash() ];
            return $this->response->setJSON($ret);
        }

        $oUserInfo = $user_model->setTable('tb_user')->where('user_email', $email)->where('id !=' , auth()->id() )->first();

        if( $oUserInfo ) $ret = ['success' => false, 'msg' => '같은 이메일이 존재합니다.', '_csrf' => csrf_hash()];
        else  $ret = ['success' => true, 'msg' => '사용가능한 이메일 입니다.', '_csrf' => csrf_hash()];

        return $this->response->setJSON($ret);


    }


    private function common_top()
    {
        $view = \Config\Services::renderer();

        $user_model = new UserModel();
        $aUserInfo =  $user_model->where('id' , auth()->id())->first();

        $ddy = '0';
        if( session('isPay') ) $ddy = getDDay($aUserInfo->e_use_date);

        $ddy = sprintf('%003d',$ddy);

        $aInput = [
                'username' => $aUserInfo->username
            ,   'ddy' => $ddy
            ,   's_use_date' => $aUserInfo->s_use_date
            ,   'e_use_date' => $aUserInfo->e_use_date
        ];

        $view->setData($aInput);
        return $view->render('my/_parts/_myTop');
    }

}