<?php
namespace App\Controllers;

use App\Entities\Order;
use App\Entities\Paylog;
use App\Libraries\KCP;
use App\Libraries\SMS;
use App\Models\GoodsModel;
use App\Models\OrderModel;
use App\Models\PayLogModel;
use App\Models\UserModel;
use CodeIgniter\HTTP\RequestInterface;
use CodeIgniter\HTTP\ResponseInterface;
use Psr\Log\LoggerInterface;

class Payment extends BaseController
{

    public $isTest = false;

    public function initController(RequestInterface $request, ResponseInterface $response, LoggerInterface $logger)
    {
        parent::initController($request, $response, $logger); // TODO: Change the autogenerated stub

        /**
         * @TODO : 특정 대상에게만 테스트로 처리되도록 코드 추가
         *
         **/
        if(0){
            $this->isTest = true;
        }



    }

    public function index() : bool
    {
        $this->_header(true);
        echo view('payment/index');
        $this->_footer(true);

        return true;
    }


    public function upsertForm()
    {

        $goods_model = new GoodsModel();
        $aGoodInfo = $goods_model->where('use_flag' , 'Y')->first();
        $aGoodList = $goods_model->where('use_flag' , 'Y')->asArray()->findAll();

        $user_model = new UserModel();
        $aUserInfo = $user_model->where('id' , auth()->id())->first();

        if(empty($aUserInfo->cell_tel)){
            return redirect()->to('My/info')->with('error',"연락처 정보가 없습니다.\\n회원정보를 수정 후 결제를 진행해주세요!");
        }

        $aInput = [
                'order_id'  => generateOrderId(auth()->id())
            ,   'aGoodInfo' => $aGoodInfo
            ,   'aGoodList' => $aGoodList
            ,   'aUserInfo' => $aUserInfo
            ,   'site_code' => $this->isTest ? setting('Payment.site_code_TEST') : setting('Payment.site_code')
            ,   'site_name' => setting('App.site_name')
            ,   'script_url' => $this->isTest ? setting('Payment.script_URL_TEST') : setting('Payment.script_URL')
        ];

        $this->_header();

        if(isTest()){
//            echo view('payment/upsert_form_t' , $aInput);
            echo view('payment/upsert_form' , $aInput);
        }else{
            echo view('payment/upsert_form' , $aInput);
        }


        $this->_footer();

    }

    public function getGoodInfo() :ResponseInterface
    {
        $good_id = $this->request->getPost('good_id');

        $goods_model = new GoodsModel();
        $aGoodInfo = $goods_model->asArray()->find($good_id);

        if(empty($aGoodInfo)){
            return $this->response->setJSON(['success' => false , 'msg' => '상품정보가 없습니다.' , 'data' => []]);
        }

        if(session('isPay')){ //연장
            $s_date = view_date_format(session('s_use_date'),4);
            $e_date = view_date_format(date("Ymd", strtotime("+{$aGoodInfo['months']} months", strtotime( session('e_use_date')."000000"))),4);
        }else{//신규
            $s_date = date('Y.m.d');
            $e_date = date("Y.m.d", strtotime("+{$aGoodInfo['months']} months"));
        }

        if(1){

            $temp = $aGoodInfo;
            unset($aGoodInfo);
            $aGoodInfo = [];
            $aGoodInfo['set_s_use_date'] = $s_date;
            $aGoodInfo['set_e_use_date'] = $e_date;
            $aGoodInfo['amount_per_month'] = number_format($temp['good_amount']/12);
            $aGoodInfo['amount'] = number_format($temp['good_amount']);
            $aGoodInfo['org_amount_str'] = number_format($temp['org_amount']);

        }else{

            $aGoodInfo['set_s_use_date'] = $s_date;
            $aGoodInfo['set_e_use_date'] = $e_date;
            $aGoodInfo['amount_per_month'] = number_format($aGoodInfo['good_amount']/12);
            $aGoodInfo['amount'] = number_format($aGoodInfo['good_amount']);
            $aGoodInfo['org_amount_str'] = number_format($aGoodInfo['org_amount']);

        }



        return $this->response->setJSON(['success' => true , 'msg' => '' , 'data' => $aGoodInfo]);

    }

    public function process(): ResponseInterface
    {

        $agent = $this->request->getUserAgent();

        $aInfo = $this->request->getPost();

        $isMobile = false;

        if($agent->isMobile()){
            $aInfo['good_id'] = $aInfo['param_opt_1'];
            $aInfo['o_paymethod'] = $aInfo['param_opt_2'];

            unset($aInfo['param_opt_1']);
            unset($aInfo['param_opt_2']);
            unset($aInfo['param_opt_3']);
            $isMobile = true;
        }


        if($aInfo['o_paymethod'] == 'fixed_vacc') return $this->process_edupre($aInfo); //고정계좌 처리

        $order_model = new OrderModel();
        $aChkOrder = $order_model->where('order_id' , $aInfo['ordr_idxx'])->where('pay_flag !=', 'R')->first();

        if($aChkOrder){
            //return redirect()->to('Payment/failed',302)->with('message','이미 처리된 주문입니다. '. json_encode($aChkOrder));
            log_message('error', '이미 처리된 주문입니다. '. json_encode($aChkOrder));
            return redirect()->to('Payment/failed',302)->with('message','이미 처리된 주문입니다.');
        }

        $KCP      = new KCP();
        $json_res = $KCP->pay_process($aInfo);

        if( $json_res['res_cd'] != '0000' ) { //실패
            return redirect()->to('Payment/failed',302)->with('message','['.$json_res['res_cd'].'] '. $json_res['res_msg']);
        }

        $aInfo = array_merge(['json_res' => $json_res],$aInfo);


        try{

            {//insert orderInfo
                //load model
                $user_model = new UserModel();
                $paylog_model = new PayLogModel();
                $good_model = new GoodsModel();

                //load entity
                $enOrder = new Order();
                $enPayLog = new Paylog();

                //get userInfo
                $aUserInfo = $user_model->where('id' , auth()->id())->first();
                $aGoodInfo = $good_model->where('good_id' , $aInfo['good_id'])->first();
                $aOrderInfo = $order_model->where('order_id' , $aInfo['ordr_idxx'])->asArray()->first();

                if(empty($aUserInfo)){
                    throw new \Exception('결제할 회원 정보가 없습니다.');
                }

                $aInput = [
                        'order_id'      => $aInfo['ordr_idxx']
                    ,   'good_id'       => $aInfo['good_id']
                    ,   'user_id'       => $aUserInfo->id
//                    ,   's_use_date'    => $s_use_date
//                    ,   'e_use_date'    => $e_use_date
                    ,   'o_name'        => $aInfo['buyr_name']
                    ,   'o_email'       => $aInfo['buyr_mail']
                    ,   'o_celltel'     => $aInfo['buyr_tel2']
                    ,   'o_paymethod'   => $aInfo["o_paymethod"]
                    ,   'good_name'     => $aGoodInfo->good_name
                    ,   'amount'        => $aInfo['good_mny']
                    ,   'tno'           => $json_res['tno']
                    ,   'pay_sms_yn'    => 'Y'
                    ,   'reg_date'      => date('YmdHis')
                    ,   'reg_id'        => $aUserInfo->id
                    ,   'reg_ip'        => $this->request->getIPAddress()
                    ,   'cash_receipt'  => 'N'
                    ,   'mobile'        => $isMobile ? 'Y' : 'N'
                ];

                if($aOrderInfo){ //사전 등록된 주문정보가 있는 경우 pk를 기입하여 update로 처리되도록 유도 ex) 모바일(m_step1)
                    $aInput['idx'] = $aOrderInfo['idx'];
                }

                if($aInfo["o_paymethod"] == 'card'){

                    if($aUserInfo->e_use_date >= date('Ymd')){ //기간연장
                        $timestamp = strtotime("+1 years", strtotime( $aUserInfo->e_use_date."000000"));
                        //$aInput['s_use_date'] = $aUserInfo->s_use_date; //결제 완료 후 취소할때 참조 데이터로 사용하기위해 시작일을 이전 종료일로 변경
                        $aInput['s_use_date'] = $aUserInfo->e_use_date;
                        $aInput['e_use_date'] = date("Ymd", $timestamp);
                    }else{ //신규
                        $aInput['s_use_date'] = date('Ymd');
                        $aInput['e_use_date'] = date("Ymd", strtotime("+1 years"));
                    }

                }

                if($aInfo["o_paymethod"] == 'vcnt' /* 이거나 휴대폰인 경우 */) {

                    if($aInfo['cash_receipt'] == 'Y'){//세금계산서 신청
                        $aInput['cash_receipt'] = 'Y';
                        $aInput['cash_name'] = $aInfo['cash_name'];
                        $aInput['cash_ceo'] = $aInfo['cash_ceo'];
                        $aInput['cash_email'] = $aInfo['cash_email'];
                        $aInput['cash_address'] = $aInfo['cash_address'];
                        $aInput['cash_no'] = $aInfo['id_info'];
                    }

                }

                if($aInfo["o_paymethod"] == 'vcnt') { //무통장 입금 / 입금대기

                    $aInput['pay_flag'] = 'W';
                    $aInput['bank'] = $json_res['bankname'];
                    $aInput['bankcode'] = $json_res['bankcode'];
                    $aInput['bankacct'] = $json_res['account'];
                    $aInput['vacc_limit'] = $json_res['va_date'];
                    $aInput['deposit'] = $json_res['depositor'];

                } else { //신용카드 | 휴대폰 결제 / 입금완료;

                    $aInput['pay_flag'] = 'Y';
                    $aInput['pay_date'] = date('YmdHis');

                    $aInputUser = [
                            'e_use_date'    => $aInput['e_use_date']
                        ,   'id'            => $aUserInfo->id
                    ];
                    if($aUserInfo->e_use_date >= date('Ymd')) $aInputUser['s_use_date'] = $aUserInfo->s_use_date; //기간연장
                    else $aInputUser['s_use_date'] = $aInput['s_use_date'];

                    $enUser = new \CodeIgniter\Shield\Entities\User();
                    $enUser->fill($aInputUser);
                    $user_model->save($enUser);

                    session()->set(['s_use_date' => $aInputUser['s_use_date'] , 'e_use_date' => $aInputUser['e_use_date'] , 'isPay' => true]);

                }

                $enOrder->fill($aInput);
                $ret = $order_model->save($enOrder);

                if(!$ret){
                    throw new \Exception('주문정보 저장 중 문제가 발생하였습니다.');
                }
            }
            unset($aInput);
            unset($ret);

            {//insert log
                $aInput = [
                        'order_id' => $aInfo['ordr_idxx']
                    ,   'data' => json_encode($json_res)
                    ,   'type'  => 'payment'
                    ,   'reg_date' => date('YmdHis')
                ];

                $enPayLog->fill($aInput);
                $ret = $paylog_model->save($enPayLog);

                if (!$ret) {
                    throw new \Exception('주문정보 로그 저장 중 문제가 발생하였습니다.');
                }
            }

            {//결제 정보 send sms

                $sms      = new SMS();
                $aSmsInfo = [
                        'send_date' => date('YmdHis')
                    ,   'DEST_INFO' => $aInfo['buyr_name'].'^'.onlynumber($aInfo['buyr_tel2'])
                ];

                if($aInfo["o_paymethod"] == 'vcnt') { //무통장입금
                    $va_date             = view_date_format($json_res['va_date'],4);
                    $good_mny            = number_format($aInfo['good_mny']).'원';
                    $aSmsInfo['SUBJECT'] = "{$aGoodInfo->good_name} 결제";
                    $aSmsInfo['msg']     = "{$aInfo['buyr_name']}님. {$aGoodInfo->good_name}을 신청해 주셔서 감사합니다.\n{$aInfo['buyr_name']}님께서 입금하실 계좌정보를 알려드립니다.\n\n은행명: {$json_res['bankname']}\n예금주: {$json_res['depositor']}\n계좌번호: {$json_res['account']}\n입금기한: {$va_date}\n입금금액: {$good_mny}";
                    $sms->sendMMS($aSmsInfo);
                } else {
                    $aSmsInfo['msg'] = "{$aInfo['buyr_name']}님. {$aGoodInfo->good_name} 결제가 완료되었습니다.";//카드
                    $sms->sendSMS($aSmsInfo);
                }

            }

            unset($aInfo['enc_info']);
            unset($aInfo['enc_data']);

            return redirect()->to('Payment/complete?no='.$aInfo['ordr_idxx'],302);

        } catch(\Exception $e) {
            return redirect()->to('Payment/failed',302)->with('message' , $e->getMessage());

        }

    }

    public function failed()
    {

        $message = session('message');

        $this->_header();
        echo view('payment/failed' , ['message' => $message]);
        $this->_footer();

    }

    public function m_step1()
    {

        if($this->request->getPost('o_paymethod') == 'fixed_vacc') return $this->process_edupre($this->request->getPost()); //고정계좌 처리

        $target_URL         = $this->isTest ? setting('Payment.trade_insert_TEST') : setting('Payment.trade_insert'); //거래등록 API URL
        $site_cd            = $this->request->getPost("site_cd"); // 사이트코드
        $kcp_cert_info      = $this->isTest ? setting('Payment.cert_key_TEST') : setting('Payment.cert_key'); // 인증서정보(직렬화)
        $ordr_idxx          = $this->request->getPost("ordr_idxx"); // 주문번호
        $good_mny           = $this->request->getPost("good_mny"); // 결제 금액
        $good_name          = $this->request->getPost("good_name"); // 상품명
        $o_paymethod         = $this->request->getPost("o_paymethod"); // 결제수단
        $Ret_URL            = $this->request->getPost("Ret_URL"); // 리턴 URL
        $ActionResult       = strtolower($o_paymethod);
        $van_code           = $this->request->getPost("van_code");

        $data = array(
            "site_cd"        => $site_cd,
            "kcp_cert_info"  => $kcp_cert_info,
            "ordr_idxx"      => $ordr_idxx,
            "good_mny"       => $good_mny,
            "good_name"      => $good_name,
            "pay_method"     => strtoupper($o_paymethod),
            "Ret_URL"        => $Ret_URL,
            "escw_used"      => "N",
            "user_agent"     => ""
        );

        $req_data = json_encode($data);

        $header_data = array( "Content-Type: application/json", "charset=utf-8" );

        // API REQ
        $ch = curl_init();
        curl_setopt($ch, CURLOPT_URL, $target_URL);
        curl_setopt($ch, CURLOPT_HTTPHEADER, $header_data);
        curl_setopt($ch, CURLOPT_POST, 1);
        curl_setopt($ch, CURLOPT_CUSTOMREQUEST, "POST");
        curl_setopt($ch, CURLOPT_POSTFIELDS, $req_data);
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);

        // API RES
        $res_data  = curl_exec($ch);

        /*
        ==========================================================================
        거래등록 응답정보
        --------------------------------------------------------------------------
        */

        // RES JSON DATA Parsing
        $json_res = json_decode($res_data, true);

        $res_cd      = $json_res["Code"]; // 응답코드
        $res_msg     = $json_res["Message"]; // 응답메세지
        $approvalKey = $json_res["approvalKey"]; // 거래등록키
        $traceNo     = $json_res["traceNo"]; // 추적번호
        $PayUrl      = $json_res["PayUrl"]; // 거래등록 PAY URL

        curl_close($ch);

        if($res_cd != '0000'){
            return redirect()->to('/Payment/failed')->with('message','['.$res_cd.'] '.$res_msg);
        }

        $goods_model = new GoodsModel();
        $aGoodInfo = $goods_model->asArray()->find($this->request->getPost('good_id'));

        $aInput = [
            'approvalKey'    => $approvalKey, // 거래등록키
            'traceNo'        => $traceNo, // 추적번호
            'PayUrl'         => $PayUrl,// 거래등록 PAY URL
            // 인증시 필요한 결제수단 세팅 값
            'o_paymethod'     => $o_paymethod, // 결제수단
            'actionResult'   => $ActionResult,
            'van_code'       => $van_code,
            'res_cd'        => $res_cd,
            'res_msg'        => $res_msg,
            'o_name'     => $this->request->getPost('buyr_name'),
            'o_email'     => $this->request->getPost('buyr_mail'),
            'o_celltel'     => $this->request->getPost('buyr_tel2'),
            'good_id'     => $this->request->getPost('good_id'),
            "order_id"      => $ordr_idxx,
            "amount"    => $aGoodInfo['good_amount'],
            "reg_date" => date('YmdHis'),
            "reg_ip"    => $this->request->getIPAddress(),
            "reg_id"    => auth()->id(),
            "user_id"   => auth()->id(),
            "pay_flag"  => 'R',
            'cash_receipt' => 'N'
        ];

        if($this->request->getPost('cash_receipt') == 'Y'){//세금계산서 신청
            $aInput['cash_receipt'] = $this->request->getPost('cash_receipt');
            $aInput['cash_name'] = $this->request->getPost('cash_name');
            $aInput['cash_ceo'] = $this->request->getPost('cash_ceo');
            $aInput['cash_email'] = $this->request->getPost('cash_email');
            $aInput['cash_address'] = $this->request->getPost('cash_address');
            $aInput['cash_no'] = $this->request->getPost('id_info');
        }

        $aInput = array_merge($aInput ,$data);

        {// 사전 주문 정보 등록
            $enOrder = new Order();
            $order_model = new OrderModel();
            $enOrder->fill($aInput);
            $ret = $order_model->save($enOrder);
            if(!$ret){
                return redirect()->to('/Payment/failed')->with('message','[KC-ERR] 사전 주문정보 등록 중 문제가 발생했습니다.');
            }
        }

        $this->_header(true);
        echo view('payment/m_step1' , ['aInput' => $aInput]);
        $this->_footer(true);

    }

    public function m_step2()
    {
        $aInput = $this->request->getPost();

        if(isset($aInput['res_cd']) && $aInput['res_cd'] != '0000'){
            return redirect()->to('/Payment/upsertForm',302)->with('message' , $aInput['res_msg'] );
        }

        $this->_header(true);
        echo view('payment/m_step2' , ['aInput' => $aInput]);
        $this->_footer(true);

    }

    public function complete()
    {

        $aInput = [ 'order_id' => $this->request->getGet('no')  ];

        if(empty($aInput['order_id'])){
            return redirect()->to('/')->with('error' , '필수입력정보가 없습니다.');
        }

        $order_model = new OrderModel();
        $aOrderInfo = $order_model->where('order_id' , $aInput['order_id'])->first();

        if(empty($aOrderInfo)){
            return redirect()->to('/')->with('error' , '주문정보가 없습니다.');
        }

        if($aOrderInfo->user_id != auth()->id()){
            return redirect()->to('/')->with('error' , '잘못된 접근입니다.');
        }

        $this->_header();
        echo view('payment/complete' , ['aOrderInfo' => $aOrderInfo]);
        $this->_footer();

    }

    //KCP request / 가상계좌 입금완료 webhook
    public function vacc_complete()
    {

        $order_id = $this->request->getPost('order_no');
        $order_model = new OrderModel;

        //트랜잭션 시작
        $order_model->db->transBegin();
        $error_code = '0000';

        try {

            $aOrderInfo = $order_model->where('order_id',$order_id)->first();

            $user_model = new UserModel(); //load model
            $aUserInfo = $user_model->where('id' , $aOrderInfo->user_id)->first();

            //이용기간 반영
            if($aUserInfo->e_use_date > date('Ymd')){ //기간연장
                $timestamp = strtotime("+1 years", strtotime( $aUserInfo->e_use_date."000000"));
                //$s_use_date = $aUserInfo->s_use_date; //결제 완료 후 취소할때 참조 데이터로 사용하기위해 시작일을 이전 종료일로 변경
                $s_use_date = $aUserInfo->e_use_date;
                $e_use_date = date("Ymd", $timestamp);
            }else{ //신규
                $s_use_date = date('Ymd');
                $e_use_date = date("Ymd", strtotime("+1 years"));
            }

            if(empty($aOrderInfo)){
                $error_code = '0001';
                throw new \Exception('주문정보가 없습니다.');
            }

            if($aOrderInfo->pay_flag == 'Y'){
                $error_code = '0002';
                throw new \Exception('이미 결제 승인된 주문입니다.');
            }

            $enOrder = new Order();

            $aInput = [
                    'pay_flag'      => 'Y'
                ,   'deposit_sms_yn'=> 'Y'
                ,   's_use_date'    => $s_use_date
                ,   'e_use_date'    => $e_use_date
                ,   'pay_date'      => date('YmdHis')
                ,   'idx'           => $aOrderInfo->idx
            ];

            $enOrder->fill($aInput);
            $ret = $order_model->save($enOrder);

            if(empty($ret)){
                $error_code = '0003';
                throw new \Exception('입금 정보를 저장 중 문제가 발생하였습니다.');
            }

            $paylog_model = new PayLogModel();
            $enPayLog = new Paylog();

            $aInput = [
                    'order_id' => $order_id
                ,   'data' => json_encode($this->request->getPost() , JSON_UNESCAPED_UNICODE)
                ,   'type'  => 'vacc'
                ,   'reg_date' => date('YmdHis')
            ];

            $enPayLog->fill($aInput);
            $ret = $paylog_model->save($enPayLog);

            if(empty($ret)){
                $error_code = '0004';
                throw new \Exception('입금 정보 로그를 저장 중 문제가 발생하였습니다.');
            }

            $aInputUser = [
                    'e_use_date'    => $e_use_date
                ,   'id'            => $aOrderInfo->user_id
            ];

            if($aUserInfo->e_use_date >= date('Ymd')) $aInputUser['s_use_date'] = $aUserInfo->s_use_date; //기간연장
            else $aInputUser['s_use_date'] = $s_use_date;

            $enUser = new \CodeIgniter\Shield\Entities\User();

            $enUser->fill($aInputUser); // input
            $ret = $user_model->save($enUser); // save

            if(empty($ret)){
                $error_code = '0005';
                throw new \Exception('회원의 이용기간을 반영 중 문제가 발생하였습니다.');
            }


            {//결제 정보 send sms

                $sms      = new SMS();
                $aSmsInfo = [
                        'send_date' => date('YmdHis')
                    ,   'DEST_INFO' => $aOrderInfo->o_name.'^'.onlynumber($aOrderInfo->o_celltel)
                ];

                $aSmsInfo['msg'] = "{$aOrderInfo->o_name}님. {$aOrderInfo->good_name} 입금이 완료되었습니다.";//입금완료
                $ret = $sms->sendSMS($aSmsInfo);

                if(empty($ret)){
                    $error_code = '0006';
                    throw new \Exception('입금완료 메시지 발송중 문제가 발생하였습니다.');
                }

            }

            //exception으로 빠지지 않은 경우 commit 처리
            $order_model->db->transCommit();

            $resp = [
                    'site_cd' => setting('Payment.site_code')
                ,   'tno'  => $aOrderInfo->tno
                ,   'order_no' => $aOrderInfo->order_id
                ,   'tx_cd' => 'TX00'
                ,   'tx_tm' => date('YmdHis')
                ,   'result' => '0000'
            ];


        } catch(\Exception $e) {

            if($error_code == '0002'){ //이미 결제 승인된 주문에 대해서는 완료로 처리

                $resp = [
                        'site_cd' => setting('Payment.site_code')
                    ,   'tno'  => $aOrderInfo->tno
                    ,   'order_no' => $aOrderInfo->order_id
                    ,   'tx_cd' => 'TX00'
                    ,   'tx_tm' => date('YmdHis')
                    ,   'result' => '0000'
                ];

            }else{
                $resp = [
                        'site_cd' => setting('Payment.site_code')
                    ,   'tno'  => $aOrderInfo->tno
                    ,   'order_no' => $aOrderInfo->order_id
                    ,   'tx_cd' => 'TX00'
                    ,   'tx_tm' => date('YmdHis')
                    ,   'result' => '0500'
                ];
            }

            //exception으로 빠진 경우 rollback
            $order_model->db->transRollback();

            log_message('error' , 'Payment/vacc_complete : data : ' . json_encode($this->request->getPost() ,JSON_UNESCAPED_UNICODE) . ' : msg : '. $e->getMessage());

        }

        return $this->response->setJSON($resp);

    }


    private function process_edupre($aInfo)
    {

        $order_model = new OrderModel();
        $aOrderInfo = $order_model->where('order_id' , $aInfo['ordr_idxx'])->first();
        if($aOrderInfo){
            return redirect()->to('Payment/failed',302)->with('message','이미 처리된 주문입니다. '. json_encode($aOrderInfo));
        }

        try{

            {//insert orderInfo
                //load model
                $user_model = new UserModel();
                $good_model = new GoodsModel();

                //load entity
                $enOrder = new Order();

                //get userInfo
                $aUserInfo = $user_model->where('id' , auth()->id())->first();
                $aGoodInfo = $good_model->where('good_id' , $aInfo['good_id'])->first();

                if(empty($aUserInfo)){
                    throw new \Exception('결제할 회원 정보가 없습니다.');
                }


                $agent = $this->request->getUserAgent();

                $aInput = [
                        'order_id'      => $aInfo['ordr_idxx']
                    ,   'good_id'       => $aInfo['good_id']
                    ,   'user_id'       => $aUserInfo->id
                    ,   'o_name'        => $aInfo['buyr_name']
                    ,   'o_email'       => $aInfo['buyr_mail']
                    ,   'o_celltel'     => $aInfo['buyr_tel2']
                    ,   'o_paymethod'   => $aInfo["o_paymethod"]
                    ,   'good_name'     => $aGoodInfo->good_name
                    ,   'amount'        => $aInfo['good_mny']
                    ,   'tno'           => ''
                    ,   'pay_sms_yn'    => 'Y'
                    ,   'reg_date'      => date('YmdHis')
                    ,   'reg_id'        => $aUserInfo->id
                    ,   'reg_ip'        => $this->request->getIPAddress()
                    ,   'cash_receipt'  => 'N'
                    ,   'mobile'        => $agent->isMobile() ? 'Y' : 'N'
                ];

                if($aInfo['cash_receipt'] == 'Y'){//세금계산서 신청
                    $aInput['cash_receipt'] = 'Y';
                    $aInput['cash_name'] = $aInfo['cash_name'];
                    $aInput['cash_ceo'] = $aInfo['cash_ceo'];
                    $aInput['cash_email'] = $aInfo['cash_email'];
                    $aInput['cash_address'] = $aInfo['cash_address'];
                    $aInput['cash_no'] = $aInfo['id_info'];
                }

                $aInput['pay_flag'] = 'W';
                $aInput['bank'] = '농협';
                $aInput['bankcode'] = '꼬망세_전용계좌';
                $aInput['bankacct'] = '03701271258';
                $aInput['vacc_limit'] = date("YmdHis", strtotime("+7 days"));
                $aInput['deposit'] = '(주)꼬망세미디어';

                $enOrder->fill($aInput);
                $ret = $order_model->save($enOrder);

                if(!$ret){
                    throw new \Exception('주문정보 저장 중 문제가 발생하였습니다.');
                }
            }
//            unset($aInput);
            unset($ret);
            unset($aInfo['enc_info']);
            unset($aInfo['enc_data']);

            {//결제 정보 send sms

                $sms      = new SMS();
                $aSmsInfo = [
                        'send_date' => date('YmdHis')
                    ,   'DEST_INFO' => $aInfo['buyr_name'].'^'.onlynumber($aInfo['buyr_tel2'])
                ];

                $va_date             = view_date_format($aInput['vacc_limit'],4);
                $good_mny            = number_format($aInfo['good_mny']).'원';
                $aSmsInfo['SUBJECT'] = "{$aGoodInfo->good_name} 결제";
                $aSmsInfo['msg']     = "{$aInfo['buyr_name']}님. {$aGoodInfo->good_name}을 신청해 주셔서 감사합니다.\n{$aInfo['buyr_name']}님께서 입금하실 계좌정보를 알려드립니다.\n\n은행명: {$aInput['bank']}\n예금주:{$aInput['deposit']}\n계좌번호: {$aInput['bankacct']}\n입금기한: {$va_date}\n입금금액: {$good_mny}";
                $sms->sendMMS($aSmsInfo);

            }

            return redirect()->to('Payment/complete?no='.$aInfo['ordr_idxx'],302);

        } catch(\Exception $e) {
            return redirect()->to('Payment/failed',302)->with('message' , $e->getMessage());

        }

    }

}