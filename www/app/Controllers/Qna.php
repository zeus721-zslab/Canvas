<?php
namespace App\Controllers;

use App\Models\QnaModel;
use App\Models\UserModel;
use CodeIgniter\HTTP\RequestInterface;
use CodeIgniter\HTTP\ResponseInterface;
use Psr\Log\LoggerInterface;

class Qna extends BaseController
{

    public $page = 0;
    public $per_page = 30;

    public function initController(RequestInterface $request, ResponseInterface $response, LoggerInterface $logger)
    {
        parent::initController($request, $response, $logger); // TODO: Change the autogenerated stub
    }

    public function index() : bool
    {

        $aInput = [
                'user_id'       => auth()->id()
            ,   'del_yn'        => 'N'
        ];
        $nList      = self::getQnaTot($aInput);
        $tot_page   = ceil( $nList / $this->per_page );

        $view_data = [
                'tot_page'  => $tot_page
            ,   'per_page'  => $this->per_page
        ];

        $this->_header();
        echo view('qna/index' , $view_data);
        $this->_footer();

        return true;
    }

    public function view($qna_id)
    {

        $qna_model = new QnaModel();
        $aInfo       = $qna_model->asArray()->find($qna_id);

        if(empty($aInfo)){
            return redirect()->back()->with('errors','공지사항 정보가 없습니다.');
        }
        if($aInfo['user_id'] != auth()->id()){
            return redirect()->back()->with('error','해당 글에 대한 열람 권한이 없습니다.');
        }
        if($aInfo['del_yn'] == 'Y'){
            return redirect()->back()->with('error','이미 삭제된 글입니다.');
        }

        $view_data = [
            'aInfo' => $aInfo
        ];

        $this->_header();
        echo view('qna/view' , $view_data);
        $this->_footer();

    }

    public function delete($qna_id) : ResponseInterface
    {
        try {

            {//validation
                if (!$qna_id) {
                    throw new \Exception('필수입력정보가 없습니다.');
                }

                $qna_model = new QnaModel();
                $aInfo = $qna_model->asArray()->find($qna_id);

                if (empty($aInfo)) {
                    throw new \Exception('문의글 정보가 없습니다.');
                }

                if ($aInfo['user_id'] != auth()->id()) {
                    throw new \Exception('해당 글의 삭제 권한이 없습니다.');
                }

                if ($aInfo['del_yn'] == 'Y') {
                    throw new \Exception('이미 삭제된 글입니다.');
                }
            }

            $aInput = [
                    'qna_id' => $qna_id
                ,   'del_yn' => 'Y'
                ,   'del_date' => date('YmdHis')
            ];

            $enQna = new \App\Entities\Qna();
            $enQna->fill($aInput);
            $bRet = $qna_model->save($enQna);

            if(!$bRet){
                throw new \Exception('문의를 저장 중 문제가 발생하였습니다.\\n[msg] '.json_encode($qna_model->db->error()));
            }

            $ret = ['success' => true , 'msg' => '삭제가 완료되었습니다.' , 'csrf' => csrf_hash() ];

        }catch (\Exception $e)
        {
            $ret = ['success' => false , 'msg' => $e->getMessage() , 'csrf' => csrf_hash() ];
        }

        return $this->response->setJSON($ret);

    }

    public function upsertForm($qna_id = '')
    {

        $enQna = new \App\Entities\Qna();
        $aInfo = $enQna->getAttributes();

        if($qna_id){
            $qna_model = new QnaModel();
            $aInfo       = $qna_model->asArray()->find($qna_id);
            if(empty($aInfo)){
                return redirect()->back()->with('error','1:1문의 정보가 없습니다.');
            }
            if($aInfo['user_id'] != auth()->id()){
                return redirect()->back()->with('error','해당 글에 대한 수정 권한이 없습니다.');
            }
            if($aInfo['answer']){
                return redirect()->back()->with('error','답변이 있는 경우 문의글의 수정이 불가능합니다.');
            }
            if($aInfo['del_yn'] == 'Y'){
                return redirect()->back()->with('error','이미 삭제된 글입니다.');
            }
        }

        $view_data = [
            'aInfo' => $aInfo
        ];

        $this->_header();
        echo view('qna/upsertForm' , $view_data);
        $this->_footer();

    }

    public function upsert(): ResponseInterface
    {

        $qna_model = new QnaModel();
        $isUpdate = false;

        { // validation
            //default validation rules
            $rules          = [
                    'title'     => 'required'
                ,   'content'   => 'required'
            ];

            if($this->request->getPost('id')){
                $rules['id'] = 'required|numeric';


                $aInfo       = $qna_model->find($this->request->getPost('id'));
                if(empty($aInfo)){
                    return $this->response->setJSON(['success' => false , 'msg' => '1:1문의 정보가 없습니다.', 'csrf' => csrf_hash()]);
                }

                if($aInfo->user_id != auth()->id()){
                    return $this->response->setJSON(['success' => false , 'msg' => '해당 글의 수정권한이 없습니다.', 'csrf' => csrf_hash()]);
                }
                if($aInfo->del_yn == 'Y'){
                    return $this->response->setJSON(['success' => false , 'msg' => '이미 삭제된 글입니다.', 'csrf' => csrf_hash()]);
                }

                $isUpdate = true;
            }

            if (! $this->validate($rules))
            {
                return $this->response->setJSON(['success' => false , 'msg' => '' , 'error_msg' => $this->validator->getErrors(), 'csrf' => csrf_hash()]);
            }

        }

        try{

            {//data-set
                $aInput = [
                        'qna_id'    => $this->request->getPost('id')
                    ,   'title'     => $this->request->getPost('title')
                    ,   'content'   => $this->request->getPost('content')
                    ,   'user_id'   => auth()->id()

                ];

                if($isUpdate){
                    $aInput['mod_id'] = auth()->id();
                    $aInput['mod_ip'] = $this->request->getIPAddress();
                    $aInput['mod_date'] = date('YmdHis');
                }else{
                    $aInput['reg_id'] = auth()->id();
                    $aInput['reg_ip'] = $this->request->getIPAddress();
                    $aInput['reg_date'] = date('YmdHis');
                }

                $enQna = new \App\Entities\Qna();
                $enQna->fill($aInput);

            }

            if(isTest()){

//                zsView($aInput);
//                exit;

            }



            $bRet = $qna_model->save($enQna);
            if(!$bRet){
                throw new \Exception('문의를 저장 중 문제가 발생하였습니다.\\n[msg] '.json_encode($qna_model->db->error()));
            }

            $ret = ['success' => true , 'msg' => '문의가 저장되었습니다.' , 'csrf' => csrf_hash() ];

        }catch (\Exception $e){
            $ret = ['success' => false , 'msg' => $e->getMessage() , 'csrf' => csrf_hash() ];
        }

        return $this->response->setJSON($ret);

    }

    public function lists_ajax()
    {
        $pager = \Config\Services::pager();

        $aInput = [
                'search_text'   => $this->request->getPostGet('search_text')
            ,   'search_type'   => $this->request->getPostGet('search_type')
            ,   'user_id'       => auth()->id()
            ,   'del_yn'        => 'N'
        ];

        $set_page           = $this->request->getPostGet('page') ?? $this->page;
        $set_per_page       = $this->request->getPostGet('per_page') ?? $this->per_page;

        $nBoardLists        = $this->getQnaTot($aInput);

        $pagination_html    = $pager->makeLinks($set_page,$set_per_page,$nBoardLists);
        $tot_page           = ceil($nBoardLists / $set_per_page);
        $tot_page           = $tot_page ?? 1;
        $s_limit            = max(($set_page - 1) * $set_per_page, 0);

        $qna_model = new QnaModel();
        $aBoardLists = $qna_model->getQnaList($aInput, false , $s_limit , $set_per_page);

        foreach ($aBoardLists as $k => $r) {
            $aBoardLists[$k]['VNO'] = $nBoardLists - ( ($set_page - 1) * $set_per_page ) - $k;
        }

        $view_data = [
                'data'                  => $aBoardLists
            ,   'pagination_html'       => $pagination_html
            ,   'tot_page'              => $tot_page
            ,   'tot_cnt'               => $nBoardLists
            ,   'per_page'              => $set_per_page
        ];

        return view('qna/lists_ajax' , $view_data);

    }


    private function getQnaTot($aInput) : int
    {

        $qna_model = new QnaModel();
        $nLists = $qna_model->getQnaList($aInput,true);
        $nLists = array_shift($nLists);
        if(empty($nLists)) $nLists = 0;

        return (int)$nLists;

    }
    //공지사항 첨부파일다운로드



    public function myInfo() : ResponseInterface
    {

        $id = auth()->id();
        $user_model = new UserModel();
        $aUserInfo = $user_model->setTable('tb_user')->where('id' , $id)->first();

        if($aUserInfo){
            return $this->response->setJSON(['success' => true , 'msg' => '' , 'data' => $aUserInfo , 'csrf' => csrf_hash()]);
        }else{
            return $this->response->setJSON(['success' => false , 'msg' => '회원정보가 없습니다.' , 'data' => [] , 'csrf' => csrf_hash()]);
        }

    }

}